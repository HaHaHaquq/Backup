<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\RF_Tester_9188.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\RF_Tester_9188.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6190004: Last Updated: Fri Jun  6 16:12:20 2025
<BR><P>
<H3>Maximum Stack Usage =        408 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
user_packet_handler &rArr; user_msg_handler &rArr; freq_offset_rx_done &rArr; calc_freq &rArr; calc_freq_offset &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[71]">[Anonymous Symbol]</a>
 <LI><a href="#[75]">[Anonymous Symbol]</a>
 <LI><a href="#[76]">[Anonymous Symbol]</a>
 <LI><a href="#[79]">[Anonymous Symbol]</a>
 <LI><a href="#[7a]">[Anonymous Symbol]</a>
 <LI><a href="#[7b]">[Anonymous Symbol]</a>
 <LI><a href="#[7c]">[Anonymous Symbol]</a>
 <LI><a href="#[8c]">calc_freq_offset</a>
 <LI><a href="#[8f]">[Anonymous Symbol]</a>
 <LI><a href="#[9a]">[Anonymous Symbol]</a>
 <LI><a href="#[93]">[Anonymous Symbol]</a>
 <LI><a href="#[a8]">[Anonymous Symbol]</a>
 <LI><a href="#[ab]">[Anonymous Symbol]</a>
 <LI><a href="#[ad]">[Anonymous Symbol]</a>
 <LI><a href="#[b0]">[Anonymous Symbol]</a>
 <LI><a href="#[10]">[Anonymous Symbol]</a>
 <LI><a href="#[f2]">[Anonymous Symbol]</a>
 <LI><a href="#[8e]">[Anonymous Symbol]</a>
 <LI><a href="#[90]">[Anonymous Symbol]</a>
 <LI><a href="#[b2]">[Anonymous Symbol]</a>
 <LI><a href="#[98]">[Anonymous Symbol]</a>
 <LI><a href="#[b4]">[Anonymous Symbol]</a>
 <LI><a href="#[be]">[Anonymous Symbol]</a>
 <LI><a href="#[bf]">[Anonymous Symbol]</a>
 <LI><a href="#[91]">[Anonymous Symbol]</a>
 <LI><a href="#[c1]">[Anonymous Symbol]</a>
 <LI><a href="#[9b]">[Anonymous Symbol]</a>
 <LI><a href="#[c2]">[Anonymous Symbol]</a>
 <LI><a href="#[a1]">[Anonymous Symbol]</a>
 <LI><a href="#[c3]">[Anonymous Symbol]</a>
 <LI><a href="#[c4]">[Anonymous Symbol]</a>
 <LI><a href="#[c5]">[Anonymous Symbol]</a>
 <LI><a href="#[c6]">[Anonymous Symbol]</a>
 <LI><a href="#[1]">[Anonymous Symbol]</a>
 <LI><a href="#[ba]">[Anonymous Symbol]</a>
 <LI><a href="#[f1]">[Anonymous Symbol]</a>
 <LI><a href="#[96]">[Anonymous Symbol]</a>
 <LI><a href="#[97]">[Anonymous Symbol]</a>
 <LI><a href="#[ae]">[Anonymous Symbol]</a>
 <LI><a href="#[9e]">[Anonymous Symbol]</a>
 <LI><a href="#[94]">[Anonymous Symbol]</a>
 <LI><a href="#[ee]">[Anonymous Symbol]</a>
 <LI><a href="#[ef]">[Anonymous Symbol]</a>
 <LI><a href="#[99]">[Anonymous Symbol]</a>
 <LI><a href="#[9f]">[Anonymous Symbol]</a>
 <LI><a href="#[e0]">[Anonymous Symbol]</a>
 <LI><a href="#[bc]">[Anonymous Symbol]</a>
 <LI><a href="#[b3]">[Anonymous Symbol]</a>
 <LI><a href="#[b7]">[Anonymous Symbol]</a>
 <LI><a href="#[92]">[Anonymous Symbol]</a>
 <LI><a href="#[95]">[Anonymous Symbol]</a>
 <LI><a href="#[9c]">[Anonymous Symbol]</a>
 <LI><a href="#[77]">[Anonymous Symbol]</a>
 <LI><a href="#[72]">[Anonymous Symbol]</a>
 <LI><a href="#[b6]">[Anonymous Symbol]</a>
 <LI><a href="#[b5]">[Anonymous Symbol]</a>
 <LI><a href="#[b8]">[Anonymous Symbol]</a>
 <LI><a href="#[bb]">[Anonymous Symbol]</a>
 <LI><a href="#[c7]">[Anonymous Symbol]</a>
 <LI><a href="#[2]">[Anonymous Symbol]</a>
 <LI><a href="#[0]">[Anonymous Symbol]</a>
 <LI><a href="#[af]">[Anonymous Symbol]</a>
 <LI><a href="#[78]">[Anonymous Symbol]</a>
 <LI><a href="#[9d]">[Anonymous Symbol]</a>
 <LI><a href="#[120]">[Anonymous Symbol]</a>
 <LI><a href="#[e1]">[Anonymous Symbol]</a>
 <LI><a href="#[b9]">[Anonymous Symbol]</a>
 <LI><a href="#[e2]">[Anonymous Symbol]</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[a7]">cmd_uart_unknow_cmd</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a5]">uart_event_set</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[0]">[Anonymous Symbol]</a> from libfreqoffset_m3.o(.text.rttiDestroy__systemZexceptions_u56) referenced 4 times from libfreqoffset_m3.o(.data.NTIv2__9cz9cFl9aMYwDrtVdI6PQ9aJCQ_)
 <LI><a href="#[2]">[Anonymous Symbol]</a> from libfreqoffset_m3.o(.text.rttiDestroy__freqoffset_u2884) referenced 2 times from libfreqoffset_m3.o(.data.NTIv2__LpLWAY9cRm1WP3DOJ3HXrmA_)
 <LI><a href="#[10]">[Anonymous Symbol]</a> from libfreqoffset_m3.o(.text.colonanonymous___freqoffset_u1514) referenced 2 times from libfreqoffset_m3.o(.text.linear_arg__freqoffset_u1425)
 <LI><a href="#[b]">Reset_Handler</a> from startup_ing91800.o(.text) referenced from startup_ing91800.o(RESET)
 <LI><a href="#[d]">__scatterload</a> from init.o(.text) referenced from startup_ing91800.o(.text)
 <LI><a href="#[17]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[e]">app_main</a> from main.o(.text.app_main) referenced from startup_ing91800.o(.text)
 <LI><a href="#[33]">cb_assertion</a> from main.o(.text.cb_assertion) referenced from main.o(.rodata.evt_cb_table)
 <LI><a href="#[32]">cb_hard_fault</a> from main.o(.text.cb_hard_fault) referenced from main.o(.rodata.evt_cb_table)
 <LI><a href="#[35]">cb_heap_out_of_mem</a> from main.o(.text.cb_heap_out_of_mem) referenced from main.o(.rodata.evt_cb_table)
 <LI><a href="#[30]">cb_putc</a> from main.o(.text.cb_putc) referenced from main.o(.rodata.evt_cb_table)
 <LI><a href="#[36]">cb_trace_rtt</a> from trace.o(.text.cb_trace_rtt) referenced from main.o(.rodata.evt_cb_table)
 <LI><a href="#[19]">cmd_uart_ack</a> from uart_ota.o(.text.cmd_uart_ack) referenced from uart_ota.o(.rodata.cmds)
 <LI><a href="#[19]">cmd_uart_ack</a> from uart_ota.o(.text.cmd_uart_ack) referenced from uart_ota.o(.rodata.cmds_918)
 <LI><a href="#[1c]">cmd_uart_burn_lock</a> from uart_ota.o(.text.cmd_uart_burn_lock) referenced from uart_ota.o(.rodata.cmds)
 <LI><a href="#[1c]">cmd_uart_burn_lock</a> from uart_ota.o(.text.cmd_uart_burn_lock) referenced from uart_ota.o(.rodata.cmds_918)
 <LI><a href="#[18]">cmd_uart_burn_sart</a> from uart_ota.o(.text.cmd_uart_burn_sart) referenced from uart_ota.o(.rodata.cmds)
 <LI><a href="#[18]">cmd_uart_burn_sart</a> from uart_ota.o(.text.cmd_uart_burn_sart) referenced from uart_ota.o(.rodata.cmds_918)
 <LI><a href="#[1b]">cmd_uart_burn_ulk</a> from uart_ota.o(.text.cmd_uart_burn_ulk) referenced from uart_ota.o(.rodata.cmds)
 <LI><a href="#[1b]">cmd_uart_burn_ulk</a> from uart_ota.o(.text.cmd_uart_burn_ulk) referenced from uart_ota.o(.rodata.cmds_918)
 <LI><a href="#[1a]">cmd_uart_nack</a> from uart_ota.o(.text.cmd_uart_nack) referenced from uart_ota.o(.rodata.cmds)
 <LI><a href="#[1a]">cmd_uart_nack</a> from uart_ota.o(.text.cmd_uart_nack) referenced from uart_ota.o(.rodata.cmds_918)
 <LI><a href="#[25]">dummy_event_create</a> from noos_impl.o(.text.dummy_event_create) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[27]">dummy_event_set</a> from noos_impl.o(.text.dummy_event_set) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[26]">dummy_event_wait</a> from noos_impl.o(.text.dummy_event_wait) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[2a]">enter_critical</a> from noos_impl.o(.text.enter_critical) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[16]">fputc</a> from main.o(.text.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[29]">free</a> from mallocr.o(i.__free$realloc) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[11]">freq_offset_begin</a> from rf_test.o(.text.freq_offset_begin) referenced 2 times from rf_test.o(.text.loop_rf_test_state_machine)
 <LI><a href="#[2b]">leave_critical</a> from noos_impl.o(.text.leave_critical) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[c]">main</a> from startup_ing91800.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[28]">malloc</a> from mallocr.o(i.__malloc$realloc) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[2c]">noos_start</a> from noos_impl.o(.text.noos_start) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[34]">on_lle_init</a> from main.o(.text.on_lle_init) referenced from main.o(.rodata.evt_cb_table)
 <LI><a href="#[12]">on_raw_packet_done</a> from raw_pkt.o(.text.on_raw_packet_done) referenced 2 times from raw_pkt.o(.text.raw_pkt_malloc_init)
 <LI><a href="#[f]">on_raw_packet_done_rx</a> from freq_offset.o(.text.on_raw_packet_done_rx) referenced 2 times from freq_offset.o(.text.freq_test_init)
 <LI><a href="#[2f]">pendsv_isr</a> from noos_impl.o(.text.pendsv_isr) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[22]">queue_create</a> from noos_impl.o(.text.queue_create) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[24]">queue_recv_msg</a> from noos_impl.o(.text.queue_recv_msg) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[23]">queue_send_msg</a> from noos_impl.o(.text.queue_send_msg) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[31]">setup_profile</a> from profile.o(.text.setup_profile) referenced from main.o(.rodata.evt_cb_table)
 <LI><a href="#[2e]">svc_isr</a> from noos_impl.o(.text.svc_isr) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[21]">task_create</a> from noos_impl.o(.text.task_create) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[2d]">tick_isr</a> from noos_impl.o(.text.tick_isr) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[3]">timer_cb_0</a> from noos_impl.o(.text.timer_cb_0) referenced 2 times from noos_impl.o(.data.sw_timers)
 <LI><a href="#[4]">timer_cb_1</a> from noos_impl.o(.text.timer_cb_1) referenced 2 times from noos_impl.o(.data.sw_timers)
 <LI><a href="#[5]">timer_cb_2</a> from noos_impl.o(.text.timer_cb_2) referenced 2 times from noos_impl.o(.data.sw_timers)
 <LI><a href="#[6]">timer_cb_3</a> from noos_impl.o(.text.timer_cb_3) referenced 2 times from noos_impl.o(.data.sw_timers)
 <LI><a href="#[7]">timer_cb_4</a> from noos_impl.o(.text.timer_cb_4) referenced 2 times from noos_impl.o(.data.sw_timers)
 <LI><a href="#[8]">timer_cb_5</a> from noos_impl.o(.text.timer_cb_5) referenced 2 times from noos_impl.o(.data.sw_timers)
 <LI><a href="#[9]">timer_cb_6</a> from noos_impl.o(.text.timer_cb_6) referenced 2 times from noos_impl.o(.data.sw_timers)
 <LI><a href="#[a]">timer_cb_7</a> from noos_impl.o(.text.timer_cb_7) referenced 2 times from noos_impl.o(.data.sw_timers)
 <LI><a href="#[1d]">timer_create</a> from noos_impl.o(.text.timer_create) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[20]">timer_delete</a> from noos_impl.o(.text.timer_delete) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[1e]">timer_start</a> from noos_impl.o(.text.timer_start) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[1f]">timer_stop</a> from noos_impl.o(.text.timer_stop) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[14]">uart_dut_isr</a> from uart_golden_dut.o(.text.uart_dut_isr) referenced 2 times from uart_golden_dut.o(.text.uart_DUT_init)
 <LI><a href="#[15]">uart_upper_isr</a> from uart_upper_golden.o(.text.uart_upper_isr) referenced 2 times from uart_upper_golden.o(.text.uart_upper_init)
 <LI><a href="#[13]">user_packet_handler</a> from profile.o(.text.user_packet_handler) referenced 2 times from profile.o(.text.setup_profile)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[11e]"></a>att_server_register_packet_handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_profile
</UL>

<P><STRONG><a name="[c9]"></a>btstack_push_user_msg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pkt_tx_test
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_raw_packet_done_rx
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_offset_tune
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_offset_rx_end
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_offset_rx_begin
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart_raw_pkt_tx
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart_raw_pkt_rx
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_raw_packet_done
</UL>

<P><STRONG><a name="[11d]"></a>hci_add_event_handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_profile
</UL>

<P><STRONG><a name="[d6]"></a>ll_raw_packet_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pkt_malloc_init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_test_init
</UL>

<P><STRONG><a name="[d1]"></a>ll_raw_packet_get_iq_samples</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_offset_rx_done
</UL>

<P><STRONG><a name="[d0]"></a>ll_raw_packet_get_rx_data</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_offset_rx_done
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_rx
</UL>

<P><STRONG><a name="[ce]"></a>ll_raw_packet_recv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_offset_rx_begin_do
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pkt_rx_test
</UL>

<P><STRONG><a name="[10e]"></a>ll_raw_packet_send</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pkt_tx_test
</UL>

<P><STRONG><a name="[cb]"></a>ll_raw_packet_set_param</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_offset_rx_begin_do
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_packet_set_tx_param
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_packet_set_rx_param
</UL>

<P><STRONG><a name="[cc]"></a>ll_raw_packet_set_rx_cte</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_offset_rx_begin_do
</UL>

<P><STRONG><a name="[10d]"></a>ll_raw_packet_set_tx_data</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pkt_tx_test
</UL>

<P><STRONG><a name="[84]"></a>platform_config</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[103]"></a>platform_controller_run</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_recv_msg
</UL>

<P><STRONG><a name="[a4]"></a>platform_get_gen_os_driver</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_trace_rtt
</UL>

<P><STRONG><a name="[cd]"></a>platform_get_us_time</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_rf_test_state_machine
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_offset_rx_begin_do
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pkt_rx_test
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pkt_tx_test
</UL>

<P><STRONG><a name="[d9]"></a>platform_hrng</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rf_acc_addr
</UL>

<P><STRONG><a name="[f0]"></a>platform_init_controller</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noos_start
</UL>

<P><STRONG><a name="[8d]"></a>platform_printf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_rf_test_state_machine
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_offset_rx_done
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_offset_rx_begin_do
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_packet_set_tx_param
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_packet_set_rx_param
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pkt_malloc_init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_test_init
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_profile
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_upper_init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_DUT_init
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_heap_out_of_mem
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_assertion
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_hard_fault
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_buner_task_entry
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_uart_burn_sart
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_raw_packet_done_rx
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_offset_tune
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_freq
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_evk_protocol
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_offset_begin
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_result_print
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rf_channel
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_raw_pkt_loss
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_raw_tx_rx
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_raw_tx_rx
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_rx
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_freq_offset_begin
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_rx_sen_end
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_rx_sen_begin
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_rx_cnt_end
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_rx_cnt_begin
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_tx_power_begin
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_tx_cnt_begin
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_sen_cb
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_complete_packet
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_start
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_upper_process
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_complete_packet
</UL>

<P><STRONG><a name="[125]"></a>platform_raise_assertion</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_create
</UL>

<P><STRONG><a name="[80]"></a>platform_set_evt_callback_table</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[127]"></a>platform_set_irq_callback</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_upper_init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_DUT_init
</UL>

<P><STRONG><a name="[eb]"></a>platform_set_timer</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_rf_test_state_machine
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_delete
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start
</UL>

<P><STRONG><a name="[37]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))

<P><STRONG><a name="[152]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[38]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[39]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[153]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[154]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[155]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[156]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[157]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[b]"></a>Reset_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup_ing91800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ing91800.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>main</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup_ing91800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[d]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ing91800.o(.text)
</UL>
<P><STRONG><a name="[158]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[3a]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[159]"></a>___aeabi_memcpy4$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_recv_msg
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_send_msg
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_buner_task_entry
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_data
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>

<P><STRONG><a name="[104]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_recv_msg
</UL>

<P><STRONG><a name="[15b]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove8
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[3e]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[15c]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[15d]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_buner_task_entry
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pkt_reset
</UL>

<P><STRONG><a name="[8a]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;burn_ctrl_restart
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[c0]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[3f]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[b1]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pkt_tx_test
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[11f]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_rx
</UL>

<P><STRONG><a name="[73]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>

<P><STRONG><a name="[40]"></a>strcasecmp</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, strcasecmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = strcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_command
</UL>

<P><STRONG><a name="[42]"></a>calloc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, calloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = calloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[43]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smooth_Average
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[46]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smooth_Average
</UL>

<P><STRONG><a name="[47]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[65]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pow_Smooth
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smooth_Average
</UL>

<P><STRONG><a name="[48]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[4c]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[4d]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[4e]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[4f]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[a9]"></a>__aeabi_dcmplt</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, dcmplt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_dcmplt
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[aa]"></a>__aeabi_dcmpeq</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, dcmpeq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_dcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[50]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smooth_Average
</UL>

<P><STRONG><a name="[51]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pow_Smooth
</UL>

<P><STRONG><a name="[52]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[53]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[70]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smooth_Average
</UL>

<P><STRONG><a name="[66]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pow_Smooth
</UL>

<P><STRONG><a name="[54]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_freq
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[15e]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[14d]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3c]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[15f]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[160]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[161]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>tolower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tolower.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
</UL>

<P><STRONG><a name="[162]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[45]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[44]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[4b]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[4a]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[13e]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[163]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[14f]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[164]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[165]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>DUT_cmd_rf_freq_offset</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, uart_golden_dut.o(.text.DUT_cmd_rf_freq_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = DUT_cmd_rf_freq_offset &rArr; uart_cmd_packet_assemble &rArr; check_crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_DUT_send
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmd_packet_assemble
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_freq_offset_end
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_offset_begin
</UL>

<P><STRONG><a name="[59]"></a>DUT_cmd_rf_freq_offset_tune</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, uart_golden_dut.o(.text.DUT_cmd_rf_freq_offset_tune))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = DUT_cmd_rf_freq_offset_tune &rArr; uart_cmd_packet_assemble &rArr; check_crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_DUT_send
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmd_packet_assemble
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_msg_handler
</UL>

<P><STRONG><a name="[5a]"></a>DUT_cmd_rf_rx_cnt</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, uart_golden_dut.o(.text.DUT_cmd_rf_rx_cnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = DUT_cmd_rf_rx_cnt &rArr; uart_cmd_packet_assemble &rArr; check_crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_DUT_send
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmd_packet_assemble
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_rf_test_state_machine
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tf_test_rx_pkt_end
</UL>

<P><STRONG><a name="[5b]"></a>DUT_cmd_rf_rx_sen</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, uart_golden_dut.o(.text.DUT_cmd_rf_rx_sen))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = DUT_cmd_rf_rx_sen &rArr; uart_cmd_packet_assemble &rArr; check_crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_DUT_send
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmd_packet_assemble
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_rf_test_state_machine
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_sen_cb
</UL>

<P><STRONG><a name="[5c]"></a>DUT_cmd_rf_tx_cnt</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, uart_golden_dut.o(.text.DUT_cmd_rf_tx_cnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = DUT_cmd_rf_tx_cnt &rArr; uart_cmd_ch_addr_pkt_assemble &rArr; check_crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmd_ch_addr_pkt_assemble
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_DUT_send
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmd_packet_assemble
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_rf_test_state_machine
</UL>

<P><STRONG><a name="[5e]"></a>DUT_cmd_rf_tx_power</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, uart_golden_dut.o(.text.DUT_cmd_rf_tx_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = DUT_cmd_rf_tx_power &rArr; uart_cmd_packet_assemble &rArr; check_crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_DUT_send
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmd_packet_assemble
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_rf_test_state_machine
</UL>

<P><STRONG><a name="[5f]"></a>GIO_SetDirection</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, peripheral_gpio.o(.text.GIO_SetDirection))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GIO_SetDirection &rArr; GIO_MaskedWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_MaskedWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_uart_gpio_init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_gpio_init
</UL>

<P><STRONG><a name="[61]"></a>GIO_WriteValue</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, peripheral_gpio.o(.text.GIO_WriteValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GIO_WriteValue &rArr; GIO_MaskedWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_MaskedWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_pulse
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_uart_gpio_init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_gpio_init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_dut_2_run
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_check
</UL>

<P><STRONG><a name="[126]"></a>PINCTRL_Pull</STRONG> (Thumb, 132 bytes, Stack size 12 bytes, peripheral_pinctrl.o(.text.PINCTRL_Pull))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PINCTRL_Pull
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_upper_init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_DUT_init
</UL>

<P><STRONG><a name="[62]"></a>PINCTRL_SelUartRxdIn</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, peripheral_pinctrl.o(.text.PINCTRL_SelUartRxdIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PINCTRL_SelUartRxdIn &rArr; PINCTRL_SelIn
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SelIn
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_upper_init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_DUT_init
</UL>

<P><STRONG><a name="[122]"></a>PINCTRL_SetPadMux</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, peripheral_pinctrl.o(.text.PINCTRL_SetPadMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PINCTRL_SetPadMux
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_upper_init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_DUT_init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_uart_gpio_init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_gpio_init
</UL>

<P><STRONG><a name="[67]"></a>SEGGER_RTT_GetAvailWriteSpace</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, trace.o(.text.SEGGER_RTT_GetAvailWriteSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SEGGER_RTT_GetAvailWriteSpace &rArr; _GetAvailWriteSpace
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_trace_rtt
</UL>

<P><STRONG><a name="[69]"></a>SEGGER_RTT_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, trace.o(.text.SEGGER_RTT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_rtt_init
</UL>

<P><STRONG><a name="[6b]"></a>SEGGER_RTT_Write</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, trace.o(.text.SEGGER_RTT_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_trace_rtt
</UL>

<P><STRONG><a name="[6c]"></a>SEGGER_RTT_WriteNoLock</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, trace.o(.text.SEGGER_RTT_WriteNoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[121]"></a>SYSCTRL_ClearClkGateMulti</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, peripheral_sysctrl.o(.text.SYSCTRL_ClearClkGateMulti))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SYSCTRL_ClearClkGateMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_upper_init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_DUT_init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_uart_gpio_init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_gpio_init
</UL>

<P><STRONG><a name="[7f]"></a>SYSCTRL_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, peripheral_sysctrl.o(.text.SYSCTRL_Init))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[6f]"></a>Smooth_Average</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, filter.o(.text.Smooth_Average))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Smooth_Average &rArr; Pow_Smooth &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pow_Smooth
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_rx
</UL>

<P><STRONG><a name="[a3]"></a>UART_SendData</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, peripheral_uart.o(.text.UART_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_putc
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_DUT_send
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_upper_send
</UL>

<P><STRONG><a name="[71]"></a>[Anonymous Symbol]</STRONG> (Thumb, 432 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.X5BX5D___freqoffset_u2599))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[75]"></a>[Anonymous Symbol]</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.abs2__freqoffset_u500))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[76]"></a>[Anonymous Symbol]</STRONG> (Thumb, 272 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.addInt__stdZprivateZdigitsutils_u187))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[79]"></a>[Anonymous Symbol]</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.add__freqoffset_u1688))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[7a]"></a>[Anonymous Symbol]</STRONG> (Thumb, 62 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.add__freqoffset_u2214))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[7b]"></a>[Anonymous Symbol]</STRONG> (Thumb, 80 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.add__freqoffset_u2256))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[7c]"></a>[Anonymous Symbol]</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.alignedDealloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[7e]"></a>apUART_BaudRateSet</STRONG> (Thumb, 128 bytes, Stack size 28 bytes, peripheral_uart.o(.text.apUART_BaudRateSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = apUART_BaudRateSet
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Initialize
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_buner_task_entry
</UL>

<P><STRONG><a name="[133]"></a>apUART_Check_RXFIFO_EMPTY</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, peripheral_uart.o(.text.apUART_Check_RXFIFO_EMPTY))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = apUART_Check_RXFIFO_EMPTY
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_dut_isr
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_upper_isr
</UL>

<P><STRONG><a name="[a2]"></a>apUART_Check_TXFIFO_FULL</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, peripheral_uart.o(.text.apUART_Check_TXFIFO_FULL))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = apUART_Check_TXFIFO_FULL
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_putc
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_DUT_send
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_upper_send
</UL>

<P><STRONG><a name="[132]"></a>apUART_Get_all_raw_int_stat</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, peripheral_uart.o(.text.apUART_Get_all_raw_int_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = apUART_Get_all_raw_int_stat
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_dut_isr
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_upper_isr
</UL>

<P><STRONG><a name="[7d]"></a>apUART_Initialize</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, peripheral_uart.o(.text.apUART_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = apUART_Initialize &rArr; apUART_BaudRateSet
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_BaudRateSet
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_upper_init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_DUT_init
</UL>

<P><STRONG><a name="[e]"></a>app_main</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, main.o(.text.app_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = app_main &rArr; setup_peripherals &rArr; uart_upper_init &rArr; ring_fifo_init &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_impl_get_driver
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_config
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evk_config_init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_rtt_init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_set_evt_callback_table
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ing91800.o(.text)
</UL>
<P><STRONG><a name="[d2]"></a>base64_encode</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, str_util.o(.text.base64_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = base64_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_offset_rx_done
</UL>

<P><STRONG><a name="[87]"></a>boot_check</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, sw_gpio.o(.text.boot_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = boot_check &rArr; GIO_WriteValue &rArr; GIO_MaskedWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_WriteValue
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_rf_test_state_machine
</UL>

<P><STRONG><a name="[8b]"></a>calc_freq</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, freq_offset.o(.text.calc_freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = calc_freq &rArr; calc_freq_offset &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_freq_offset
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_offset_rx_done
</UL>

<P><STRONG><a name="[8c]"></a>calc_freq_offset</STRONG> (Thumb, 118 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.calc_freq_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = calc_freq_offset &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_freq
</UL>

<P><STRONG><a name="[8f]"></a>[Anonymous Symbol]</STRONG> (Thumb, 1320 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.calc_freq_offset__freqoffset_u2558))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_freq_offset
</UL>

<P><STRONG><a name="[9a]"></a>[Anonymous Symbol]</STRONG> (Thumb, 610 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.calc_snr__freqoffset_u379))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; log10 &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[93]"></a>[Anonymous Symbol]</STRONG> (Thumb, 238 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.cancel_dc__freqoffset_u17))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[30]"></a>cb_putc</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, main.o(.text.cb_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cb_putc &rArr; UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Check_TXFIFO_FULL
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata.evt_cb_table)
</UL>
<P><STRONG><a name="[36]"></a>cb_trace_rtt</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, trace.o(.text.cb_trace_rtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = cb_trace_rtt &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_get_gen_os_driver
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_GetAvailWriteSpace
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata.evt_cb_table)
</UL>
<P><STRONG><a name="[12a]"></a>check_crc16</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, crc_16.o(.text.check_crc16))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = check_crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_buner_task_entry
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmd_ch_addr_pkt_assemble
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmd_packet_assemble
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_DUT_process
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmd_start_rsp
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_upper_process
</UL>

<P><STRONG><a name="[12f]"></a>check_crc16_918</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, crc_16.o(.text.check_crc16_918))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = check_crc16_918
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_buner_task_entry
</UL>

<P><STRONG><a name="[19]"></a>cmd_uart_ack</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, uart_ota.o(.text.cmd_uart_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = cmd_uart_ack &rArr; uart_event_set &rArr; uart_buner_task_entry &rArr; uart_buner_tx_data &rArr; driver_append_tx_data &rArr; uart_DUT_send &rArr; UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_set
</UL>
<BR>[Address Reference Count : 2]<UL><LI> uart_ota.o(.rodata.cmds)
<LI> uart_ota.o(.rodata.cmds_918)
</UL>
<P><STRONG><a name="[1c]"></a>cmd_uart_burn_lock</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, uart_ota.o(.text.cmd_uart_burn_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = cmd_uart_burn_lock &rArr; uart_event_set &rArr; uart_buner_task_entry &rArr; uart_buner_tx_data &rArr; driver_append_tx_data &rArr; uart_DUT_send &rArr; UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_set
</UL>
<BR>[Address Reference Count : 2]<UL><LI> uart_ota.o(.rodata.cmds)
<LI> uart_ota.o(.rodata.cmds_918)
</UL>
<P><STRONG><a name="[18]"></a>cmd_uart_burn_sart</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, uart_ota.o(.text.cmd_uart_burn_sart))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = cmd_uart_burn_sart &rArr; uart_event_set &rArr; uart_buner_task_entry &rArr; uart_buner_tx_data &rArr; driver_append_tx_data &rArr; uart_DUT_send &rArr; UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_evk_config
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_set
</UL>
<BR>[Address Reference Count : 2]<UL><LI> uart_ota.o(.rodata.cmds)
<LI> uart_ota.o(.rodata.cmds_918)
</UL>
<P><STRONG><a name="[1b]"></a>cmd_uart_burn_ulk</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, uart_ota.o(.text.cmd_uart_burn_ulk))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = cmd_uart_burn_ulk &rArr; uart_event_set &rArr; uart_buner_task_entry &rArr; uart_buner_tx_data &rArr; driver_append_tx_data &rArr; uart_DUT_send &rArr; UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_set
</UL>
<BR>[Address Reference Count : 2]<UL><LI> uart_ota.o(.rodata.cmds)
<LI> uart_ota.o(.rodata.cmds_918)
</UL>
<P><STRONG><a name="[1a]"></a>cmd_uart_nack</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, uart_ota.o(.text.cmd_uart_nack))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = cmd_uart_nack &rArr; uart_event_set &rArr; uart_buner_task_entry &rArr; uart_buner_tx_data &rArr; driver_append_tx_data &rArr; uart_DUT_send &rArr; UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_set
</UL>
<BR>[Address Reference Count : 2]<UL><LI> uart_ota.o(.rodata.cmds)
<LI> uart_ota.o(.rodata.cmds_918)
</UL>
<P><STRONG><a name="[a7]"></a>cmd_uart_unknow_cmd</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, uart_ota.o(.text.cmd_uart_unknow_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = cmd_uart_unknow_cmd &rArr;  uart_event_set (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_set
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_command
</UL>

<P><STRONG><a name="[a8]"></a>[Anonymous Symbol]</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.cmp__freqoffset_u1536))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; __aeabi_dcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpeq
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[ab]"></a>[Anonymous Symbol]</STRONG> (Thumb, 264 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.collectColor__system_u3077))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[ad]"></a>[Anonymous Symbol]</STRONG> (Thumb, 340 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.collectCyclesBacon__system_u3147))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[b0]"></a>[Anonymous Symbol]</STRONG> (Thumb, 166 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.collectCycles__system_u3291))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[10]"></a>[Anonymous Symbol]</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.colonanonymous___freqoffset_u1514))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libfreqoffset_m3.o(.text.linear_arg__freqoffset_u1425)
</UL>
<P><STRONG><a name="[f2]"></a>[Anonymous Symbol]</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.complex__freqoffset_u1933))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[8e]"></a>[Anonymous Symbol]</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.cstrToNimstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_freq_offset
</UL>

<P><STRONG><a name="[90]"></a>[Anonymous Symbol]</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.dealloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_freq_offset
</UL>

<P><STRONG><a name="[b2]"></a>[Anonymous Symbol]</STRONG> (Thumb, 4260 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.decode__pureZbase5452_u456))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[88]"></a>delay_ms</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, evk_config.o(.text.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_rf_test_state_machine
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_buner_task_entry
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_dut_2_run
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_check
</UL>

<P><STRONG><a name="[98]"></a>[Anonymous Symbol]</STRONG> (Thumb, 344 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.demodulate__freqoffset_u1909))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[b4]"></a>[Anonymous Symbol]</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.dollar___systemZdollars_u8))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[bd]"></a>driver_append_tx_data</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, uart_golden_dut.o(.text.driver_append_tx_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = driver_append_tx_data &rArr; uart_DUT_send &rArr; UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_DUT_send
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_buner_task_entry
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_buner_tx_data
</UL>

<P><STRONG><a name="[be]"></a>[Anonymous Symbol]</STRONG> (Thumb, 660 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.eqcopy___freqoffset_u1718))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[bf]"></a>[Anonymous Symbol]</STRONG> (Thumb, 256 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.eqcopy___freqoffset_u670))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[91]"></a>[Anonymous Symbol]</STRONG> (Thumb, 126 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.eqcopy___system_u3952))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_freq_offset
</UL>

<P><STRONG><a name="[c1]"></a>[Anonymous Symbol]</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.eqdestroy___freqoffset_u1153))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[9b]"></a>[Anonymous Symbol]</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.eqdestroy___freqoffset_u1715))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[c2]"></a>[Anonymous Symbol]</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.eqdestroy___freqoffset_u2154))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[a1]"></a>[Anonymous Symbol]</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.eqdestroy___freqoffset_u667))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[c3]"></a>[Anonymous Symbol]</STRONG> (Thumb, 136 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.eqdestroy___pureZparseutils_u330))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[c4]"></a>[Anonymous Symbol]</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.eqdestroy___stdZassertions_u91))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[c5]"></a>[Anonymous Symbol]</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.eqsink___freqoffset_u1724))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[c6]"></a>[Anonymous Symbol]</STRONG> (Thumb, 114 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.eqsink___system_u3960))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[1]"></a>[Anonymous Symbol]</STRONG> (Thumb, 94 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.eqtrace___pureZparseutils_u342))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libfreqoffset_m3.o(.data.NTIv2__9cz9cFl9aMYwDrtVdI6PQ9aJCQ_)
</UL>
<P><STRONG><a name="[ba]"></a>[Anonymous Symbol]</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.eqwasMoved___freqoffset_u1712))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[f1]"></a>[Anonymous Symbol]</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.eqwasMoved___freqoffset_u2151))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[83]"></a>evk_config_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, evk_config.o(.text.evk_config_init))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[12e]"></a>flash_read</STRONG> (Thumb, 100 bytes, Stack size 28 bytes, flash_fun.o(.text.flash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_buner_task_entry
</UL>

<P><STRONG><a name="[16]"></a>fputc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, main.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fputc &rArr; cb_putc &rArr; UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_putc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[11]"></a>freq_offset_begin</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rf_test.o(.text.freq_offset_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = freq_offset_begin &rArr; DUT_cmd_rf_freq_offset &rArr; uart_cmd_packet_assemble &rArr; check_crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_cmd_rf_freq_offset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rf_test.o(.text.loop_rf_test_state_machine)
</UL>
<P><STRONG><a name="[c8]"></a>freq_offset_rx_begin</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, freq_offset.o(.text.freq_offset_rx_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = freq_offset_rx_begin
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_push_user_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_freq_offset_begin
</UL>

<P><STRONG><a name="[ca]"></a>freq_offset_rx_begin_do</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, freq_offset.o(.text.freq_offset_rx_begin_do))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = freq_offset_rx_begin_do
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_get_us_time
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_raw_packet_set_rx_cte
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_raw_packet_set_param
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_raw_packet_recv
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_offset_rx_done
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_msg_handler
</UL>

<P><STRONG><a name="[cf]"></a>freq_offset_rx_done</STRONG> (Thumb, 466 bytes, Stack size 56 bytes, freq_offset.o(.text.freq_offset_rx_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = freq_offset_rx_done &rArr; calc_freq &rArr; calc_freq_offset &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_raw_packet_get_rx_data
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_raw_packet_get_iq_samples
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_offset_rx_begin_do
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_offset_tune
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_offset_rx_end
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_freq
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_msg_handler
</UL>

<P><STRONG><a name="[d3]"></a>freq_offset_rx_end</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, freq_offset.o(.text.freq_offset_rx_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = freq_offset_rx_end
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_push_user_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_offset_rx_done
</UL>

<P><STRONG><a name="[d4]"></a>freq_offset_tune</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, freq_offset.o(.text.freq_offset_tune))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = freq_offset_tune
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_push_user_msg
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_offset_rx_done
</UL>

<P><STRONG><a name="[d5]"></a>freq_test_init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, freq_offset.o(.text.freq_test_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = freq_test_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_raw_packet_alloc
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[e4]"></a>get_buner_state</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart_ota.o(.text.get_buner_state))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_rf_test_state_machine
</UL>

<P><STRONG><a name="[a6]"></a>get_evk_config</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, evk_config.o(.text.get_evk_config))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_uart_burn_sart
</UL>

<P><STRONG><a name="[131]"></a>get_evk_protocol</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, evk_config.o(.text.get_evk_protocol))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_dut_isr
</UL>

<P><STRONG><a name="[e3]"></a>get_evk_work</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, evk_config.o(.text.get_evk_work))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_rf_test_state_machine
</UL>

<P><STRONG><a name="[e8]"></a>get_raw_pkt_count</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, raw_pkt.o(.text.get_raw_pkt_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = get_raw_pkt_count
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_rf_test_state_machine
</UL>

<P><STRONG><a name="[d7]"></a>get_raw_pkt_loss</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, raw_pkt.o(.text.get_raw_pkt_loss))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_raw_pkt_loss
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_tx_cnt_end
</UL>

<P><STRONG><a name="[e9]"></a>get_raw_pkt_power</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, raw_pkt.o(.text.get_raw_pkt_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = get_raw_pkt_power
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_rf_test_state_machine
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_tx_power_end
</UL>

<P><STRONG><a name="[d8]"></a>get_rf_acc_addr</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, raw_pkt.o(.text.get_rf_acc_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_rf_acc_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_hrng
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_start
</UL>

<P><STRONG><a name="[129]"></a>get_ring_buff_used</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, my_ring_buffer.o(.text.get_ring_buff_used))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_ring_buff_used
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_DUT_process
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_upper_process
</UL>

<P><STRONG><a name="[da]"></a>gpio_pin_pulse</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, pulse_test_gpio.o(.text.gpio_pin_pulse))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = gpio_pin_pulse &rArr; GIO_WriteValue &rArr; GIO_MaskedWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_WriteValue
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_DUT_process
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_upper_process
</UL>

<P><STRONG><a name="[dc]"></a>handle_command</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, uart_ota.o(.text.handle_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = handle_command &rArr; strcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_uart_unknow_cmd
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_buner_task_entry
</UL>

<P><STRONG><a name="[96]"></a>[Anonymous Symbol]</STRONG> (Thumb, 632 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.linear_arg__freqoffset_u1425))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove8
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[97]"></a>[Anonymous Symbol]</STRONG> (Thumb, 2408 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.linear_regression__freqoffset_u753))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[de]"></a>loop_rf_test_state_machine</STRONG> (Thumb, 2508 bytes, Stack size 104 bytes, rf_test.o(.text.loop_rf_test_state_machine))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = loop_rf_test_state_machine &rArr; DUT_cmd_rf_tx_power &rArr; uart_cmd_packet_assemble &rArr; check_crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_get_us_time
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_set_timer
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_dut_2_run
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_evk_protocol
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_buner_state
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_check
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_evk_work
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_test_state
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_result_print
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_raw_pkt_power
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_raw_pkt_count
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart_raw_pkt_tx
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart_raw_pkt_rx
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_cmd_rf_tx_power
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_cmd_rf_tx_cnt
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_cmd_rf_rx_sen
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_cmd_rf_rx_cnt
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_process
</UL>

<P><STRONG><a name="[ae]"></a>[Anonymous Symbol]</STRONG> (Thumb, 180 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.markGray__system_u2996))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[9e]"></a>[Anonymous Symbol]</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.minus___freqoffset_u104))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[94]"></a>[Anonymous Symbol]</STRONG> (Thumb, 70 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.newSeqPayload))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; calloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[ee]"></a>[Anonymous Symbol]</STRONG> (Thumb, 218 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.newSeq__freqoffset_u1010))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[ef]"></a>[Anonymous Symbol]</STRONG> (Thumb, 62 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.newSeq__freqoffset_u2032))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[99]"></a>[Anonymous Symbol]</STRONG> (Thumb, 62 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.newSeq__freqoffset_u282))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[9f]"></a>[Anonymous Symbol]</STRONG> (Thumb, 62 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.newSeq__freqoffset_u526))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[e0]"></a>[Anonymous Symbol]</STRONG> (Thumb, 78 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.newSeq__freqoffset_u530))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[bc]"></a>[Anonymous Symbol]</STRONG> (Thumb, 66 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.nimDestroyAndDispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[b3]"></a>[Anonymous Symbol]</STRONG> (Thumb, 62 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.nimNewObj))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; calloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[b7]"></a>[Anonymous Symbol]</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.nimPrepareStrMutationImpl__system_u2384))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[2c]"></a>noos_start</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, noos_impl.o(.text.noos_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = noos_start
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init_controller
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[34]"></a>on_lle_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(.text.on_lle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = on_lle_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata.evt_cb_table)
</UL>
<P><STRONG><a name="[12]"></a>on_raw_packet_done</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, raw_pkt.o(.text.on_raw_packet_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = on_raw_packet_done
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_push_user_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_raw_tx_rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> raw_pkt.o(.text.raw_pkt_malloc_init)
</UL>
<P><STRONG><a name="[f]"></a>on_raw_packet_done_rx</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, freq_offset.o(.text.on_raw_packet_done_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = on_raw_packet_done_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_push_user_msg
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freq_offset.o(.text.freq_test_init)
</UL>
<P><STRONG><a name="[85]"></a>os_impl_get_driver</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, noos_impl.o(.text.os_impl_get_driver))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[92]"></a>[Anonymous Symbol]</STRONG> (Thumb, 476 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.parse_to_s16_complex__freqoffset_u2009))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[110]"></a>peek_ring_fifo_char</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, my_ring_buffer.o(.text.peek_ring_fifo_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = peek_ring_fifo_char
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_DUT_process
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_upper_process
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ring_fifo_char
</UL>

<P><STRONG><a name="[2f]"></a>pendsv_isr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, noos_impl.o(.text.pendsv_isr))
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[95]"></a>[Anonymous Symbol]</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.phase__freqoffset_u1950))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; atan2 &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[9c]"></a>[Anonymous Symbol]</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.plus___freqoffset_u50))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[77]"></a>[Anonymous Symbol]</STRONG> (Thumb, 158 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.prepareAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[72]"></a>[Anonymous Symbol]</STRONG> (Thumb, 322 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.prepareSeqAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[b6]"></a>[Anonymous Symbol]</STRONG> (Thumb, 150 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.raiseExceptionEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[b5]"></a>[Anonymous Symbol]</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.rawNewString))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[105]"></a>raw_packet_set_rx_param</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, raw_pkt.o(.text.raw_packet_set_rx_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = raw_packet_set_rx_param
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_raw_packet_set_param
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_msg_handler
</UL>

<P><STRONG><a name="[106]"></a>raw_packet_set_tx_param</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, raw_pkt.o(.text.raw_packet_set_tx_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = raw_packet_set_tx_param
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_raw_packet_set_param
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_msg_handler
</UL>

<P><STRONG><a name="[107]"></a>raw_pkt_malloc_init</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, raw_pkt.o(.text.raw_pkt_malloc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = raw_pkt_malloc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_raw_packet_alloc
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[109]"></a>raw_pkt_rx_test</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, raw_pkt.o(.text.raw_pkt_rx_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = raw_pkt_rx_test &rArr; show_rx &rArr; Smooth_Average &rArr; Pow_Smooth &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_get_us_time
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_raw_packet_recv
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_rx
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pkt_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_msg_handler
</UL>

<P><STRONG><a name="[10b]"></a>raw_pkt_tx_test</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, raw_pkt.o(.text.raw_pkt_tx_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = raw_pkt_tx_test &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_get_us_time
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_raw_packet_set_tx_data
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_raw_packet_send
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_push_user_msg
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pkt_reset
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_msg_handler
</UL>

<P><STRONG><a name="[10f]"></a>read_ring_fifo_char</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, my_ring_buffer.o(.text.read_ring_fifo_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = read_ring_fifo_char &rArr; peek_ring_fifo_char
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peek_ring_fifo_char
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_DUT_process
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_upper_process
</UL>

<P><STRONG><a name="[b8]"></a>[Anonymous Symbol]</STRONG> (Thumb, 78 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.rect__freqoffset_u1928))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[bb]"></a>[Anonymous Symbol]</STRONG> (Thumb, 194 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.rememberCycle__system_u3356))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[e6]"></a>reset_dut_2_run</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, sw_gpio.o(.text.reset_dut_2_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = reset_dut_2_run &rArr; GIO_WriteValue &rArr; GIO_MaskedWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_WriteValue
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_rf_test_state_machine
</UL>

<P><STRONG><a name="[ed]"></a>reset_test_state</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rf_test.o(.text.reset_test_state))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_rf_test_state_machine
</UL>

<P><STRONG><a name="[c7]"></a>[Anonymous Symbol]</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.resize__system_u2833))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[e7]"></a>restart_raw_pkt_rx</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, raw_pkt.o(.text.restart_raw_pkt_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = restart_raw_pkt_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_push_user_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_rf_test_state_machine
</UL>

<P><STRONG><a name="[ea]"></a>restart_raw_pkt_tx</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, raw_pkt.o(.text.restart_raw_pkt_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = restart_raw_pkt_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_push_user_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_rf_test_state_machine
</UL>

<P><STRONG><a name="[102]"></a>rf_test_freq_offset_begin</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, rf_test.o(.text.rf_test_freq_offset_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rf_test_freq_offset_begin &rArr; freq_offset_rx_begin
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_offset_rx_begin
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_complete_packet
</UL>

<P><STRONG><a name="[113]"></a>rf_test_freq_offset_end</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, rf_test.o(.text.rf_test_freq_offset_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = rf_test_freq_offset_end &rArr; DUT_cmd_rf_freq_offset &rArr; uart_cmd_packet_assemble &rArr; check_crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_cmd_rf_freq_offset
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_msg_handler
</UL>

<P><STRONG><a name="[fd]"></a>rf_test_rx_cnt_begin</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, rf_test.o(.text.rf_test_rx_cnt_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rf_test_rx_cnt_begin &rArr; start_raw_tx_rx &rArr; on_raw_packet_done
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_raw_tx_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_complete_packet
</UL>

<P><STRONG><a name="[fe]"></a>rf_test_rx_cnt_end</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, rf_test.o(.text.rf_test_rx_cnt_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rf_test_rx_cnt_end
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_complete_packet
</UL>

<P><STRONG><a name="[ff]"></a>rf_test_rx_sen_begin</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, rf_test.o(.text.rf_test_rx_sen_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rf_test_rx_sen_begin
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_complete_packet
</UL>

<P><STRONG><a name="[101]"></a>rf_test_rx_sen_end</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, rf_test.o(.text.rf_test_rx_sen_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rf_test_rx_sen_end
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_complete_packet
</UL>

<P><STRONG><a name="[f5]"></a>rf_test_start</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, rf_test.o(.text.rf_test_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rf_test_start &rArr; set_rf_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rf_acc_addr
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rf_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_complete_packet
</UL>

<P><STRONG><a name="[f9]"></a>rf_test_tx_cnt_begin</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, rf_test.o(.text.rf_test_tx_cnt_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rf_test_tx_cnt_begin &rArr; start_raw_tx_rx &rArr; on_raw_packet_done
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_raw_tx_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_complete_packet
</UL>

<P><STRONG><a name="[fa]"></a>rf_test_tx_cnt_end</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, rf_test.o(.text.rf_test_tx_cnt_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rf_test_tx_cnt_end &rArr; get_raw_pkt_loss
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_raw_pkt_loss
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_raw_tx_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_complete_packet
</UL>

<P><STRONG><a name="[fb]"></a>rf_test_tx_power_begin</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, rf_test.o(.text.rf_test_tx_power_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rf_test_tx_power_begin
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_complete_packet
</UL>

<P><STRONG><a name="[fc]"></a>rf_test_tx_power_end</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, rf_test.o(.text.rf_test_tx_power_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rf_test_tx_power_end &rArr; get_raw_pkt_power
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_raw_pkt_power
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_complete_packet
</UL>

<P><STRONG><a name="[117]"></a>ring_fifo_init</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, my_ring_buffer.o(.text.ring_fifo_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ring_fifo_init &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_power_of_two
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_upper_init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_DUT_init
</UL>

<P><STRONG><a name="[2]"></a>[Anonymous Symbol]</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.rttiDestroy__freqoffset_u2884))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libfreqoffset_m3.o(.data.NTIv2__LpLWAY9cRm1WP3DOJ3HXrmA_)
</UL>
<P><STRONG><a name="[0]"></a>[Anonymous Symbol]</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.rttiDestroy__systemZexceptions_u56))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libfreqoffset_m3.o(.data.NTIv2__9cz9cFl9aMYwDrtVdI6PQ9aJCQ_)
</UL>
<P><STRONG><a name="[100]"></a>rx_sen_cb</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, uart_golden_dut.o(.text.rx_sen_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = rx_sen_cb &rArr; DUT_cmd_rf_rx_sen &rArr; uart_cmd_packet_assemble &rArr; check_crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_cmd_rf_rx_sen
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_complete_packet
</UL>

<P><STRONG><a name="[af]"></a>[Anonymous Symbol]</STRONG> (Thumb, 380 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.scan__system_u3052))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[78]"></a>[Anonymous Symbol]</STRONG> (Thumb, 218 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.setLengthStrV2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[e5]"></a>set_evk_protocol</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, evk_config.o(.text.set_evk_protocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = set_evk_protocol
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_rf_test_state_machine
</UL>

<P><STRONG><a name="[115]"></a>set_rf_channel</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, raw_pkt.o(.text.set_rf_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = set_rf_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_start
</UL>

<P><STRONG><a name="[81]"></a>setup_peripherals</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, main.o(.text.setup_peripherals))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = setup_peripherals &rArr; uart_upper_init &rArr; ring_fifo_init &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_upper_init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_DUT_init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_uart_gpio_init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[31]"></a>setup_profile</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, profile.o(.text.setup_profile))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = setup_profile
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_register_packet_handler
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_add_event_handler
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata.evt_cb_table)
</UL>
<P><STRONG><a name="[9d]"></a>[Anonymous Symbol]</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.slash___freqoffset_u62))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[120]"></a>[Anonymous Symbol]</STRONG> (Thumb, 1062 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.sort__freqoffset_u1563))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[e1]"></a>[Anonymous Symbol]</STRONG> (Thumb, 208 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.sorted__freqoffset_u1541))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[b9]"></a>[Anonymous Symbol]</STRONG> (Thumb, 106 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.star___freqoffset_u1942))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[114]"></a>start_raw_tx_rx</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, raw_pkt.o(.text.start_raw_tx_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = start_raw_tx_rx &rArr; on_raw_packet_done
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_raw_packet_done
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_rx_cnt_begin
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_tx_cnt_begin
</UL>

<P><STRONG><a name="[116]"></a>stop_raw_tx_rx</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, raw_pkt.o(.text.stop_raw_tx_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stop_raw_tx_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tf_test_rx_pkt_end
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_tx_cnt_end
</UL>

<P><STRONG><a name="[2e]"></a>svc_isr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, noos_impl.o(.text.svc_isr))
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[11a]"></a>sw_uart_gpio_init</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, sw_gpio.o(.text.sw_uart_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = sw_uart_gpio_init &rArr; GIO_WriteValue &rArr; GIO_MaskedWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_WriteValue
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_SetDirection
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SetPadMux
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGateMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
</UL>

<P><STRONG><a name="[119]"></a>test_gpio_init</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, pulse_test_gpio.o(.text.test_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = test_gpio_init &rArr; GIO_WriteValue &rArr; GIO_MaskedWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_WriteValue
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_SetDirection
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SetPadMux
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGateMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
</UL>

<P><STRONG><a name="[123]"></a>tf_test_rx_pkt_end</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rf_test.o(.text.tf_test_rx_pkt_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = tf_test_rx_pkt_end &rArr; DUT_cmd_rf_rx_cnt &rArr; uart_cmd_packet_assemble &rArr; check_crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_raw_tx_rx
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_cmd_rf_rx_cnt
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_msg_handler
</UL>

<P><STRONG><a name="[2d]"></a>tick_isr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, noos_impl.o(.text.tick_isr))
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[82]"></a>trace_rtt_init</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, trace.o(.text.trace_rtt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = trace_rtt_init &rArr; SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[11b]"></a>uart_DUT_init</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, uart_golden_dut.o(.text.uart_DUT_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = uart_DUT_init &rArr; ring_fifo_init &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_Pull
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SelUartRxdIn
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_set_irq_callback
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SetPadMux
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGateMulti
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Initialize
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_fifo_init
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
</UL>

<P><STRONG><a name="[128]"></a>uart_DUT_process</STRONG> (Thumb, 920 bytes, Stack size 32 bytes, uart_golden_dut.o(.text.uart_DUT_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = uart_DUT_process &rArr; process_complete_packet &rArr; rx_sen_cb &rArr; DUT_cmd_rf_rx_sen &rArr; uart_cmd_packet_assemble &rArr; check_crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_pulse
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_complete_packet
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_crc16
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ring_buff_used
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ring_fifo_char
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peek_ring_fifo_char
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_dut_isr
</UL>

<P><STRONG><a name="[58]"></a>uart_DUT_send</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, uart_golden_dut.o(.text.uart_DUT_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart_DUT_send &rArr; UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Check_TXFIFO_FULL
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_cmd_rf_freq_offset_tune
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_append_tx_data
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_cmd_rf_freq_offset
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_cmd_rf_tx_power
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_cmd_rf_tx_cnt
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_cmd_rf_rx_sen
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_cmd_rf_rx_cnt
</UL>

<P><STRONG><a name="[12b]"></a>uart_buner_rx_data</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, uart_ota.o(.text.uart_buner_rx_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = uart_buner_rx_data &rArr; uart_event_set &rArr; uart_buner_task_entry &rArr; uart_buner_tx_data &rArr; driver_append_tx_data &rArr; uart_DUT_send &rArr; UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_data
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_set
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_dut_isr
</UL>

<P><STRONG><a name="[12c]"></a>uart_buner_task_entry</STRONG> (Thumb, 2976 bytes, Stack size 192 bytes, uart_ota.o(.text.uart_buner_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = uart_buner_task_entry &rArr; uart_buner_tx_data &rArr; driver_append_tx_data &rArr; uart_DUT_send &rArr; UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_BaudRateSet
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_command
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_buner_tx_data
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;burn_ctrl_restart
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_crc16_918
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_append_tx_data
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_crc16
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_set
</UL>

<P><STRONG><a name="[5d]"></a>uart_cmd_ch_addr_pkt_assemble</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, uart_golden_dut.o(.text.uart_cmd_ch_addr_pkt_assemble))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = uart_cmd_ch_addr_pkt_assemble &rArr; check_crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_cmd_rf_tx_cnt
</UL>

<P><STRONG><a name="[f7]"></a>uart_cmd_get_result_rsp</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, uart_upper_golden.o(.text.uart_cmd_get_result_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uart_cmd_get_result_rsp &rArr; uart_upper_send &rArr; UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_upper_send
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_complete_packet
</UL>

<P><STRONG><a name="[57]"></a>uart_cmd_packet_assemble</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, uart_golden_dut.o(.text.uart_cmd_packet_assemble))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = uart_cmd_packet_assemble &rArr; check_crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_cmd_rf_freq_offset_tune
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_cmd_rf_freq_offset
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_cmd_rf_tx_power
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_cmd_rf_tx_cnt
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_cmd_rf_rx_sen
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_cmd_rf_rx_cnt
</UL>

<P><STRONG><a name="[f6]"></a>uart_cmd_start_rsp</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, uart_upper_golden.o(.text.uart_cmd_start_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = uart_cmd_start_rsp &rArr; uart_upper_send &rArr; UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_upper_send
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_complete_packet
</UL>

<P><STRONG><a name="[14]"></a>uart_dut_isr</STRONG> (Thumb, 234 bytes, Stack size 56 bytes, uart_golden_dut.o(.text.uart_dut_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = uart_dut_isr &rArr; uart_buner_rx_data &rArr; uart_event_set &rArr; uart_buner_task_entry &rArr; uart_buner_tx_data &rArr; driver_append_tx_data &rArr; uart_DUT_send &rArr; UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Get_all_raw_int_stat
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Check_RXFIFO_EMPTY
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_DUT_process
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_buner_rx_data
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_evk_protocol
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_ring_fifo_char
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_golden_dut.o(.text.uart_DUT_init)
</UL>
<P><STRONG><a name="[11c]"></a>uart_upper_init</STRONG> (Thumb, 214 bytes, Stack size 48 bytes, uart_upper_golden.o(.text.uart_upper_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = uart_upper_init &rArr; ring_fifo_init &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_Pull
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SelUartRxdIn
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_set_irq_callback
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SetPadMux
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGateMulti
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Initialize
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_fifo_init
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
</UL>

<P><STRONG><a name="[15]"></a>uart_upper_isr</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, uart_upper_golden.o(.text.uart_upper_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = uart_upper_isr &rArr; uart_upper_process &rArr; process_complete_packet &rArr; uart_cmd_get_result_rsp &rArr; uart_upper_send &rArr; UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Get_all_raw_int_stat
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Check_RXFIFO_EMPTY
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_upper_process
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_ring_fifo_char
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_upper_golden.o(.text.uart_upper_init)
</UL>
<P><STRONG><a name="[135]"></a>uart_upper_process</STRONG> (Thumb, 1280 bytes, Stack size 48 bytes, uart_upper_golden.o(.text.uart_upper_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = uart_upper_process &rArr; process_complete_packet &rArr; uart_cmd_get_result_rsp &rArr; uart_upper_send &rArr; UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_pulse
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_crc16
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_complete_packet
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ring_buff_used
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ring_fifo_char
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peek_ring_fifo_char
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_upper_isr
</UL>

<P><STRONG><a name="[130]"></a>uart_upper_send</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, uart_upper_golden.o(.text.uart_upper_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart_upper_send &rArr; UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Check_TXFIFO_FULL
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmd_get_result_rsp
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmd_start_rsp
</UL>

<P><STRONG><a name="[134]"></a>write_ring_fifo_char</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, my_ring_buffer.o(.text.write_ring_fifo_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = write_ring_fifo_char
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_dut_isr
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_upper_isr
</UL>

<P><STRONG><a name="[e2]"></a>[Anonymous Symbol]</STRONG> (Thumb, 278 bytes, Stack size unknown bytes, libfreqoffset_m3.o(.text.zip__freqoffset_u996))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[13a]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[167]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[168]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[169]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[db]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = printf
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_pulse
</UL>

<P><STRONG><a name="[13c]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[16a]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[16b]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[16c]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[10c]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pkt_tx_test
</UL>

<P><STRONG><a name="[142]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[29]"></a>free</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, mallocr.o(i.__free$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_buner_task_entry
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[13d]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 828 bytes, Stack size 128 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[13f]"></a>__kernel_cos</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[140]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[141]"></a>__kernel_sin</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[28]"></a>malloc</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mallocr.o(i.__malloc$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_create
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_buner_task_entry
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_fifo_init
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[145]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[146]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_infnan &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[147]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[148]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[143]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[16d]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[16e]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[16f]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[150]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[14e]"></a>atan</STRONG> (Thumb, 474 bytes, Stack size 40 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[f3]"></a>atan2</STRONG> (Thumb, 374 bytes, Stack size 32 bytes, atan2.o(i.atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = atan2 &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[111]"></a>cos</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, cos.o(i.cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[151]"></a>log</STRONG> (Thumb, 808 bytes, Stack size 96 bytes, log.o(i.log))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = log &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
</UL>

<P><STRONG><a name="[a0]"></a>log10</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, log10.o(i.log10))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = log10 &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[ac]"></a>realloc</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, mallocr.o(i.realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[112]"></a>sin</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, sin.o(i.sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[32]"></a>cb_hard_fault</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, main.o(.text.cb_hard_fault))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cb_hard_fault
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata.evt_cb_table)
</UL>
<P><STRONG><a name="[33]"></a>cb_assertion</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, main.o(.text.cb_assertion))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cb_assertion
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata.evt_cb_table)
</UL>
<P><STRONG><a name="[35]"></a>cb_heap_out_of_mem</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, main.o(.text.cb_heap_out_of_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cb_heap_out_of_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata.evt_cb_table)
</UL>
<P><STRONG><a name="[13]"></a>user_packet_handler</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, profile.o(.text.user_packet_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = user_packet_handler &rArr; user_msg_handler &rArr; freq_offset_rx_done &rArr; calc_freq &rArr; calc_freq_offset &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pkt_malloc_init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_test_init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_msg_handler
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event_packet_get_user_msg
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_event_state_get_state
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event_packet_get_type
</UL>
<BR>[Address Reference Count : 1]<UL><LI> profile.o(.text.setup_profile)
</UL>
<P><STRONG><a name="[137]"></a>hci_event_packet_get_type</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, profile.o(.text.hci_event_packet_get_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = hci_event_packet_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[138]"></a>btstack_event_state_get_state</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, profile.o(.text.btstack_event_state_get_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = btstack_event_state_get_state
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[139]"></a>hci_event_packet_get_user_msg</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, profile.o(.text.hci_event_packet_get_user_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = hci_event_packet_get_user_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[136]"></a>user_msg_handler</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, profile.o(.text.user_msg_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = user_msg_handler &rArr; freq_offset_rx_done &rArr; calc_freq &rArr; calc_freq_offset &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_cmd_rf_freq_offset_tune
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_freq_offset_end
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_offset_rx_done
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_offset_rx_begin_do
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tf_test_rx_pkt_end
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_packet_set_tx_param
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_packet_set_rx_param
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pkt_rx_test
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pkt_tx_test
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[3]"></a>timer_cb_0</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, noos_impl.o(.text.timer_cb_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_cb_0 &rArr; timer_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.data.sw_timers)
</UL>
<P><STRONG><a name="[124]"></a>timer_cb</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, noos_impl.o(.text.timer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb_7
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb_6
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb_5
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb_4
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb_3
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb_2
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb_1
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb_0
</UL>

<P><STRONG><a name="[4]"></a>timer_cb_1</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, noos_impl.o(.text.timer_cb_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_cb_1 &rArr; timer_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.data.sw_timers)
</UL>
<P><STRONG><a name="[5]"></a>timer_cb_2</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, noos_impl.o(.text.timer_cb_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_cb_2 &rArr; timer_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.data.sw_timers)
</UL>
<P><STRONG><a name="[6]"></a>timer_cb_3</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, noos_impl.o(.text.timer_cb_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_cb_3 &rArr; timer_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.data.sw_timers)
</UL>
<P><STRONG><a name="[7]"></a>timer_cb_4</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, noos_impl.o(.text.timer_cb_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_cb_4 &rArr; timer_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.data.sw_timers)
</UL>
<P><STRONG><a name="[8]"></a>timer_cb_5</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, noos_impl.o(.text.timer_cb_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_cb_5 &rArr; timer_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.data.sw_timers)
</UL>
<P><STRONG><a name="[9]"></a>timer_cb_6</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, noos_impl.o(.text.timer_cb_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_cb_6 &rArr; timer_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.data.sw_timers)
</UL>
<P><STRONG><a name="[a]"></a>timer_cb_7</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, noos_impl.o(.text.timer_cb_7))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_cb_7 &rArr; timer_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.data.sw_timers)
</UL>
<P><STRONG><a name="[1d]"></a>timer_create</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, noos_impl.o(.text.timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_raise_assertion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[1e]"></a>timer_start</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, noos_impl.o(.text.timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_set_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[1f]"></a>timer_stop</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, noos_impl.o(.text.timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_set_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[20]"></a>timer_delete</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, noos_impl.o(.text.timer_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_delete
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_set_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[21]"></a>task_create</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, noos_impl.o(.text.task_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = task_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[22]"></a>queue_create</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, noos_impl.o(.text.queue_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = queue_create &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[23]"></a>queue_send_msg</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, noos_impl.o(.text.queue_send_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = queue_send_msg &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[24]"></a>queue_recv_msg</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, noos_impl.o(.text.queue_recv_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = queue_recv_msg &rArr; idle_process &rArr; loop_rf_test_state_machine &rArr; DUT_cmd_rf_tx_power &rArr; uart_cmd_packet_assemble &rArr; check_crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_controller_run
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_process
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[dd]"></a>idle_process</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, noos_impl.o(.text.idle_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = idle_process &rArr; loop_rf_test_state_machine &rArr; DUT_cmd_rf_tx_power &rArr; uart_cmd_packet_assemble &rArr; check_crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_rf_test_state_machine
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_recv_msg
</UL>

<P><STRONG><a name="[26]"></a>dummy_event_wait</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, noos_impl.o(.text.dummy_event_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = dummy_event_wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[27]"></a>dummy_event_set</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, noos_impl.o(.text.dummy_event_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = dummy_event_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[2a]"></a>enter_critical</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, noos_impl.o(.text.enter_critical))
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[2b]"></a>leave_critical</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, noos_impl.o(.text.leave_critical))
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[25]"></a>dummy_event_create</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, noos_impl.o(.text.dummy_event_create))
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[60]"></a>GIO_MaskedWrite</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, peripheral_gpio.o(.text.GIO_MaskedWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GIO_MaskedWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_WriteValue
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_SetDirection
</UL>

<P><STRONG><a name="[63]"></a>PINCTRL_SelIn</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, peripheral_pinctrl.o(.text.PINCTRL_SelIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PINCTRL_SelIn
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SelUartRxdIn
</UL>

<P><STRONG><a name="[6a]"></a>_DoInit</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, trace.o(.text._DoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[68]"></a>_GetAvailWriteSpace</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, trace.o(.text._GetAvailWriteSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_GetAvailWriteSpace
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[6d]"></a>_WriteNoCheck</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, trace.o(.text._WriteNoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[6e]"></a>_WriteBlocking</STRONG> (Thumb, 220 bytes, Stack size 48 bytes, trace.o(.text._WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[118]"></a>is_power_of_two</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, my_ring_buffer.o(.text.is_power_of_two))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = is_power_of_two
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_fifo_init
</UL>

<P><STRONG><a name="[f4]"></a>process_complete_packet</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, uart_upper_golden.o(.text.process_complete_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = process_complete_packet &rArr; uart_cmd_get_result_rsp &rArr; uart_upper_send &rArr; UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_start
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmd_get_result_rsp
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmd_start_rsp
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_upper_process
</UL>

<P><STRONG><a name="[f8]"></a>process_complete_packet</STRONG> (Thumb, 840 bytes, Stack size 24 bytes, uart_golden_dut.o(.text.process_complete_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = process_complete_packet &rArr; rx_sen_cb &rArr; DUT_cmd_rf_rx_sen &rArr; uart_cmd_packet_assemble &rArr; check_crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_freq_offset_begin
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_rx_sen_end
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_rx_sen_begin
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_rx_cnt_end
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_rx_cnt_begin
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_tx_power_end
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_tx_power_begin
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_tx_cnt_end
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_tx_cnt_begin
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_sen_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_DUT_process
</UL>

<P><STRONG><a name="[108]"></a>raw_pkt_reset</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, raw_pkt.o(.text.raw_pkt_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = raw_pkt_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pkt_rx_test
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pkt_tx_test
</UL>

<P><STRONG><a name="[10a]"></a>show_rx</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, raw_pkt.o(.text.show_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = show_rx &rArr; Smooth_Average &rArr; Pow_Smooth &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_raw_packet_get_rx_data
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smooth_Average
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pkt_rx_test
</UL>

<P><STRONG><a name="[ec]"></a>rf_test_result_print</STRONG> (Thumb, 388 bytes, Stack size 8 bytes, rf_test.o(.text.rf_test_result_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rf_test_result_print
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_rf_test_state_machine
</UL>

<P><STRONG><a name="[64]"></a>Pow_Smooth</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, filter.o(.text.Pow_Smooth))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Pow_Smooth &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smooth_Average
</UL>

<P><STRONG><a name="[a5]"></a>uart_event_set</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, uart_ota.o(.text.uart_event_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = uart_event_set &rArr; uart_buner_task_entry &rArr; uart_buner_tx_data &rArr; driver_append_tx_data &rArr; uart_DUT_send &rArr; UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_buner_task_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_uart_burn_lock
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_uart_burn_ulk
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_uart_nack
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_uart_unknow_cmd
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_uart_ack
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_uart_burn_sart
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_buner_rx_data
</UL>

<P><STRONG><a name="[89]"></a>burn_ctrl_restart</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, uart_ota.o(.text.burn_ctrl_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = burn_ctrl_restart
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_buner_task_entry
</UL>

<P><STRONG><a name="[12d]"></a>uart_buner_tx_data</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, uart_ota.o(.text.uart_buner_tx_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uart_buner_tx_data &rArr; driver_append_tx_data &rArr; uart_DUT_send &rArr; UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_append_tx_data
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_buner_task_entry
</UL>

<P><STRONG><a name="[86]"></a>append_data</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, uart_ota.o(.text.append_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = append_data &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_buner_rx_data
</UL>

<P><STRONG><a name="[149]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[13b]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[14c]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[14b]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[17]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[144]"></a>internal_alloc</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mallocr.o(i.internal_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
