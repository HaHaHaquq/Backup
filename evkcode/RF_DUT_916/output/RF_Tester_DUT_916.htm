<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\RF_Tester_DUT_916.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\RF_Tester_DUT_916.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6190004: Last Updated: Thu Jun  5 16:41:45 2025
<BR><P>
<H3>Maximum Stack Usage =        320 bytes + Unknown(Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
app_main &rArr; SYSCTRL_Init &rArr; flash_get_factory_calib_data &rArr; flash_prepare_factory_data &rArr; copy_security_data &rArr; read_flash_security &rArr; SYSCTRL_ICacheControl &rArr; SYSCTRL_CacheControl0 &rArr; set_reg_bits
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[8]">Reset_Handler</a> from startup_ing91600.o(.text) referenced from startup_ing91600.o(RESET)
 <LI><a href="#[a]">__scatterload</a> from init.o(.text) referenced from startup_ing91600.o(.text)
 <LI><a href="#[13]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[b]">app_main</a> from main.o(.text.app_main) referenced from startup_ing91600.o(.text)
 <LI><a href="#[2a]">cb_assertion</a> from main.o(.text.cb_assertion) referenced from main.o(.rodata.evt_cb_table)
 <LI><a href="#[29]">cb_hard_fault</a> from main.o(.text.cb_hard_fault) referenced from main.o(.rodata.evt_cb_table)
 <LI><a href="#[2c]">cb_heap_out_of_mem</a> from main.o(.text.cb_heap_out_of_mem) referenced from main.o(.rodata.evt_cb_table)
 <LI><a href="#[27]">cb_putc</a> from main.o(.text.cb_putc) referenced from main.o(.rodata.evt_cb_table)
 <LI><a href="#[2d]">cb_trace_rtt</a> from trace.o(.text.cb_trace_rtt) referenced from main.o(.rodata.evt_cb_table)
 <LI><a href="#[1c]">dummy_event_create</a> from noos_impl.o(.text.dummy_event_create) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[1e]">dummy_event_set</a> from noos_impl.o(.text.dummy_event_set) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[1d]">dummy_event_wait</a> from noos_impl.o(.text.dummy_event_wait) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[21]">enter_critical</a> from noos_impl.o(.text.enter_critical) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[12]">fputc</a> from main.o(.text.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[20]">free</a> from malloc.o(i.free) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[22]">leave_critical</a> from noos_impl.o(.text.leave_critical) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[9]">main</a> from startup_ing91600.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[1f]">malloc</a> from malloc.o(i.malloc) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[23]">noos_start</a> from noos_impl.o(.text.noos_start) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[2b]">on_lle_init</a> from main.o(.text.on_lle_init) referenced from main.o(.rodata.evt_cb_table)
 <LI><a href="#[d]">on_raw_packet_done</a> from raw_pkt.o(.text.on_raw_packet_done) referenced 2 times from raw_pkt.o(.text.raw_pkt_malloc_init)
 <LI><a href="#[c]">on_raw_packet_done_tx</a> from freq_offset.o(.text.on_raw_packet_done_tx) referenced 2 times from freq_offset.o(.text.freq_test_init)
 <LI><a href="#[26]">pendsv_isr</a> from noos_impl.o(.text.pendsv_isr) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[19]">queue_create</a> from noos_impl.o(.text.queue_create) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[1b]">queue_recv_msg</a> from noos_impl.o(.text.queue_recv_msg) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[1a]">queue_send_msg</a> from noos_impl.o(.text.queue_send_msg) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[28]">setup_profile</a> from profile.o(.text.setup_profile) referenced from main.o(.rodata.evt_cb_table)
 <LI><a href="#[e]">start_raw_tx_rx</a> from raw_pkt.o(.text.start_raw_tx_rx) referenced 2 times from rf_test.o(.text.rf_test_tx_cnt_begin)
 <LI><a href="#[25]">svc_isr</a> from noos_impl.o(.text.svc_isr) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[18]">task_create</a> from noos_impl.o(.text.task_create) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[24]">tick_isr</a> from noos_impl.o(.text.tick_isr) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[0]">timer_cb_0</a> from noos_impl.o(.text.timer_cb_0) referenced 2 times from noos_impl.o(.data.sw_timers)
 <LI><a href="#[1]">timer_cb_1</a> from noos_impl.o(.text.timer_cb_1) referenced 2 times from noos_impl.o(.data.sw_timers)
 <LI><a href="#[2]">timer_cb_2</a> from noos_impl.o(.text.timer_cb_2) referenced 2 times from noos_impl.o(.data.sw_timers)
 <LI><a href="#[3]">timer_cb_3</a> from noos_impl.o(.text.timer_cb_3) referenced 2 times from noos_impl.o(.data.sw_timers)
 <LI><a href="#[4]">timer_cb_4</a> from noos_impl.o(.text.timer_cb_4) referenced 2 times from noos_impl.o(.data.sw_timers)
 <LI><a href="#[5]">timer_cb_5</a> from noos_impl.o(.text.timer_cb_5) referenced 2 times from noos_impl.o(.data.sw_timers)
 <LI><a href="#[6]">timer_cb_6</a> from noos_impl.o(.text.timer_cb_6) referenced 2 times from noos_impl.o(.data.sw_timers)
 <LI><a href="#[7]">timer_cb_7</a> from noos_impl.o(.text.timer_cb_7) referenced 2 times from noos_impl.o(.data.sw_timers)
 <LI><a href="#[14]">timer_create</a> from noos_impl.o(.text.timer_create) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[17]">timer_delete</a> from noos_impl.o(.text.timer_delete) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[15]">timer_start</a> from noos_impl.o(.text.timer_start) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[16]">timer_stop</a> from noos_impl.o(.text.timer_stop) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[f]">tx_power_test_over</a> from rf_test.o(.text.tx_power_test_over) referenced 2 times from rf_test.o(.text.rf_test_tx_power_begin)
 <LI><a href="#[11]">uart_dut_isr</a> from uart_golden_dut.o(.text.uart_dut_isr) referenced 2 times from uart_golden_dut.o(.text.uart_DUT_init)
 <LI><a href="#[10]">user_packet_handler</a> from profile.o(.text.user_packet_handler) referenced 2 times from profile.o(.text.setup_profile)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[bb]"></a>att_server_register_packet_handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_profile
</UL>

<P><STRONG><a name="[7f]"></a>btstack_push_user_msg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_raw_packet_done_tx
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_raw_packet_done
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_offset_tx_begin
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart_raw_pkt_rx
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart_raw_pkt_tx
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pkt_tx_test
</UL>

<P><STRONG><a name="[ba]"></a>hci_add_event_handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_profile
</UL>

<P><STRONG><a name="[87]"></a>ll_raw_packet_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pkt_malloc_init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_test_init
</UL>

<P><STRONG><a name="[bc]"></a>ll_raw_packet_get_rx_data</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_rx
</UL>

<P><STRONG><a name="[a6]"></a>ll_raw_packet_recv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pkt_rx_test
</UL>

<P><STRONG><a name="[85]"></a>ll_raw_packet_send</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_offset_tx_begin_do
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pkt_tx_test
</UL>

<P><STRONG><a name="[81]"></a>ll_raw_packet_set_param</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_offset_tx_begin_do
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_packet_set_tx_param
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_packet_set_rx_param
</UL>

<P><STRONG><a name="[82]"></a>ll_raw_packet_set_tx_cte</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_offset_tx_begin_do
</UL>

<P><STRONG><a name="[83]"></a>ll_raw_packet_set_tx_data</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_offset_tx_begin_do
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pkt_tx_test
</UL>

<P><STRONG><a name="[6a]"></a>platform_config</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_offset_tx_begin_do
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[9d]"></a>platform_controller_run</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_recv_msg
</UL>

<P><STRONG><a name="[71]"></a>platform_get_gen_os_driver</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_trace_rtt
</UL>

<P><STRONG><a name="[84]"></a>platform_get_us_time</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_offset_tx_begin_do
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pkt_rx_test
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pkt_tx_test
</UL>

<P><STRONG><a name="[90]"></a>platform_init_controller</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noos_start
</UL>

<P><STRONG><a name="[6e]"></a>platform_printf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_rx
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_raw_tx_rx
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_raw_tx_rx
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rf_channel
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_power_test_over
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dut_test_state
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_freq_offset_end
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_offset_tune
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_freq_offset_begin
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_rx_sen_end
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_rx_sen_begin
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_rx_cnt_end
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_rx_cnt_begin
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_tx_power_end
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_tx_power_begin
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_tx_cnt_end
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_tx_cnt_begin
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_DUT_send
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmd_packet_assemble
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_DUT_process
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_dut_isr
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_complete_packet
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_offset_tx_begin_do
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_packet_set_tx_param
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_packet_set_rx_param
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_cnt_test_over
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_profile
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_DUT_init
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_heap_out_of_mem
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_assertion
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_hard_fault
</UL>

<P><STRONG><a name="[bf]"></a>platform_raise_assertion</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_create
</UL>

<P><STRONG><a name="[67]"></a>platform_set_evt_callback_table</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[c2]"></a>platform_set_irq_callback</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_DUT_init
</UL>

<P><STRONG><a name="[b4]"></a>platform_set_timer</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_delete
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_tx_power_begin
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_tx_cnt_begin
</UL>

<P><STRONG><a name="[2e]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))

<P><STRONG><a name="[d6]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[2f]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[30]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[d7]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[d8]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[d9]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[da]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[db]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[8]"></a>Reset_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup_ing91600.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ing91600.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>main</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup_ing91600.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[a]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ing91600.o(.text)
</UL>
<P><STRONG><a name="[dc]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[31]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[dd]"></a>___aeabi_memcpy4$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash_security0
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_recv_msg
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_send_msg
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
</UL>

<P><STRONG><a name="[9f]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_recv_msg
</UL>

<P><STRONG><a name="[df]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[35]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[e1]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[e2]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[34]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pkt_reset
</UL>

<P><STRONG><a name="[e3]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[36]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[a9]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pkt_tx_test
</UL>

<P><STRONG><a name="[bd]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_rx
</UL>

<P><STRONG><a name="[63]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>

<P><STRONG><a name="[37]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[3b]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[3c]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[3d]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[3e]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[e5]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[d5]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[33]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[e6]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[e7]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[e8]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[3a]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[39]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[3f]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d2]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ea]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>DUT_cmd_rf_freq_offset</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, uart_golden_dut.o(.text.DUT_cmd_rf_freq_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = DUT_cmd_rf_freq_offset &rArr; uart_cmd_packet_assemble &rArr; check_crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_DUT_send
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmd_packet_assemble
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_complete_packet
</UL>

<P><STRONG><a name="[43]"></a>DUT_cmd_rf_rx_cnt</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, uart_golden_dut.o(.text.DUT_cmd_rf_rx_cnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = DUT_cmd_rf_rx_cnt &rArr; uart_cmd_packet_assemble &rArr; check_crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_DUT_send
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmd_packet_assemble
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_complete_packet
</UL>

<P><STRONG><a name="[44]"></a>DUT_cmd_rf_rx_sen</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, uart_golden_dut.o(.text.DUT_cmd_rf_rx_sen))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = DUT_cmd_rf_rx_sen &rArr; uart_cmd_packet_assemble &rArr; check_crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_DUT_send
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmd_packet_assemble
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_complete_packet
</UL>

<P><STRONG><a name="[45]"></a>DUT_cmd_rf_tx_cnt</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, uart_golden_dut.o(.text.DUT_cmd_rf_tx_cnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = DUT_cmd_rf_tx_cnt &rArr; uart_cmd_packet_assemble &rArr; check_crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_DUT_send
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmd_packet_assemble
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_tx_cnt_end
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_complete_packet
</UL>

<P><STRONG><a name="[46]"></a>DUT_cmd_rf_tx_power</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, uart_golden_dut.o(.text.DUT_cmd_rf_tx_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = DUT_cmd_rf_tx_power &rArr; uart_cmd_packet_assemble &rArr; check_crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_DUT_send
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmd_packet_assemble
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_tx_power_end
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_complete_packet
</UL>

<P><STRONG><a name="[47]"></a>GIO_SetDirection</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, peripheral_gpio.o(.text.GIO_SetDirection))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GIO_SetDirection &rArr; GIO_MaskedWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_MaskedWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_gpio_init
</UL>

<P><STRONG><a name="[8e]"></a>GIO_WriteValue</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, peripheral_gpio.o(.text.GIO_WriteValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GIO_WriteValue
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_pulse
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_gpio_init
</UL>

<P><STRONG><a name="[c1]"></a>PINCTRL_Pull</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, peripheral_pinctrl.o(.text.PINCTRL_Pull))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PINCTRL_Pull
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
</UL>

<P><STRONG><a name="[4d]"></a>PINCTRL_SelUartRxdIn</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, peripheral_pinctrl.o(.text.PINCTRL_SelUartRxdIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = PINCTRL_SelUartRxdIn &rArr; PINCTRL_SelInput &rArr; PINCTRL_SetPadMux &rArr; source_id_on_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SelInput
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
</UL>

<P><STRONG><a name="[4c]"></a>PINCTRL_SetPadMux</STRONG> (Thumb, 422 bytes, Stack size 24 bytes, peripheral_pinctrl.o(.text.PINCTRL_SetPadMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PINCTRL_SetPadMux &rArr; source_id_on_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;source_id_on_pin
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reg_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_gpio_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SelInput
</UL>

<P><STRONG><a name="[4f]"></a>SEGGER_RTT_GetAvailWriteSpace</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, trace.o(.text.SEGGER_RTT_GetAvailWriteSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SEGGER_RTT_GetAvailWriteSpace &rArr; _GetAvailWriteSpace
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_trace_rtt
</UL>

<P><STRONG><a name="[51]"></a>SEGGER_RTT_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, trace.o(.text.SEGGER_RTT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_rtt_init
</UL>

<P><STRONG><a name="[53]"></a>SEGGER_RTT_Write</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, trace.o(.text.SEGGER_RTT_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_trace_rtt
</UL>

<P><STRONG><a name="[54]"></a>SEGGER_RTT_WriteNoLock</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, trace.o(.text.SEGGER_RTT_WriteNoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[5a]"></a>SYSCTRL_ClearClkGate</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, peripheral_sysctrl.o(.text.SYSCTRL_ClearClkGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SYSCTRL_ClearClkGate &rArr; SYSCTRL_ClkGateCtrl &rArr; set_reg_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClkGateCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGateMulti
</UL>

<P><STRONG><a name="[5c]"></a>SYSCTRL_ClearClkGateMulti</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, peripheral_sysctrl.o(.text.SYSCTRL_ClearClkGateMulti))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SYSCTRL_ClearClkGateMulti &rArr; SYSCTRL_ClearClkGate &rArr; SYSCTRL_ClkGateCtrl &rArr; set_reg_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGate
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_gpio_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
</UL>

<P><STRONG><a name="[5d]"></a>SYSCTRL_ICacheControl</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, peripheral_sysctrl.o(.text.SYSCTRL_ICacheControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SYSCTRL_ICacheControl &rArr; SYSCTRL_CacheControl0 &rArr; set_reg_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_CacheControl0
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash_security
</UL>

<P><STRONG><a name="[5e]"></a>SYSCTRL_Init</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, peripheral_sysctrl.o(.text.SYSCTRL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = SYSCTRL_Init &rArr; flash_get_factory_calib_data &rArr; flash_prepare_factory_data &rArr; copy_security_data &rArr; read_flash_security &rArr; SYSCTRL_ICacheControl &rArr; SYSCTRL_CacheControl0 &rArr; set_reg_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_factory_calib_data
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_SetLDOOutput
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reg_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[60]"></a>SYSCTRL_SetLDOOutput</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, peripheral_sysctrl.o(.text.SYSCTRL_SetLDOOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SYSCTRL_SetLDOOutput &rArr; set_reg_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reg_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_Init
</UL>

<P><STRONG><a name="[61]"></a>Smooth_Average</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, filter.o(.text.Smooth_Average))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Smooth_Average &rArr; Pow_Smooth
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pow_Smooth
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_rx
</UL>

<P><STRONG><a name="[70]"></a>UART_SendData</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, peripheral_uart.o(.text.UART_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_DUT_send
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_putc
</UL>

<P><STRONG><a name="[66]"></a>apUART_BaudRateSet</STRONG> (Thumb, 128 bytes, Stack size 28 bytes, peripheral_uart.o(.text.apUART_BaudRateSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = apUART_BaudRateSet
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Initialize
</UL>

<P><STRONG><a name="[c7]"></a>apUART_Check_RXFIFO_EMPTY</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, peripheral_uart.o(.text.apUART_Check_RXFIFO_EMPTY))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = apUART_Check_RXFIFO_EMPTY
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_dut_isr
</UL>

<P><STRONG><a name="[6f]"></a>apUART_Check_TXFIFO_FULL</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, peripheral_uart.o(.text.apUART_Check_TXFIFO_FULL))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = apUART_Check_TXFIFO_FULL
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_DUT_send
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_putc
</UL>

<P><STRONG><a name="[c6]"></a>apUART_Get_all_raw_int_stat</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, peripheral_uart.o(.text.apUART_Get_all_raw_int_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = apUART_Get_all_raw_int_stat
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_dut_isr
</UL>

<P><STRONG><a name="[65]"></a>apUART_Initialize</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, peripheral_uart.o(.text.apUART_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = apUART_Initialize &rArr; apUART_BaudRateSet
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_BaudRateSet
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_DUT_init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_uart
</UL>

<P><STRONG><a name="[b]"></a>app_main</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, main.o(.text.app_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = app_main &rArr; SYSCTRL_Init &rArr; flash_get_factory_calib_data &rArr; flash_prepare_factory_data &rArr; copy_security_data &rArr; read_flash_security &rArr; SYSCTRL_ICacheControl &rArr; SYSCTRL_CacheControl0 &rArr; set_reg_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_impl_get_driver
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_config
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_rtt_init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_set_evt_callback_table
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ing91600.o(.text)
</UL>
<P><STRONG><a name="[27]"></a>cb_putc</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, main.o(.text.cb_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cb_putc &rArr; UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Check_TXFIFO_FULL
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata.evt_cb_table)
</UL>
<P><STRONG><a name="[2d]"></a>cb_trace_rtt</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, trace.o(.text.cb_trace_rtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = cb_trace_rtt &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_get_gen_os_driver
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_GetAvailWriteSpace
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata.evt_cb_table)
</UL>
<P><STRONG><a name="[c5]"></a>check_crc16</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, crc_16.o(.text.check_crc16))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = check_crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmd_packet_assemble
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_DUT_process
</UL>

<P><STRONG><a name="[72]"></a>config_uart</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, main.o(.text.config_uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = config_uart &rArr; apUART_Initialize &rArr; apUART_BaudRateSet
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
</UL>

<P><STRONG><a name="[76]"></a>erase_flash_sector</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, eflash.o(.text.erase_flash_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = erase_flash_sector &rArr; program_flash
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_prepare_factory_data
</UL>

<P><STRONG><a name="[7b]"></a>flash_enable_write_protection</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, eflash.o(.text.flash_enable_write_protection))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = flash_enable_write_protection
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_prepare_factory_data
</UL>

<P><STRONG><a name="[5f]"></a>flash_get_factory_calib_data</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, eflash.o(.text.flash_get_factory_calib_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = flash_get_factory_calib_data &rArr; flash_prepare_factory_data &rArr; copy_security_data &rArr; read_flash_security &rArr; SYSCTRL_ICacheControl &rArr; SYSCTRL_CacheControl0 &rArr; set_reg_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_prepare_factory_data
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_Init
</UL>

<P><STRONG><a name="[78]"></a>flash_prepare_factory_data</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, eflash.o(.text.flash_prepare_factory_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = flash_prepare_factory_data &rArr; copy_security_data &rArr; read_flash_security &rArr; SYSCTRL_ICacheControl &rArr; SYSCTRL_CacheControl0 &rArr; set_reg_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_enable_write_protection
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash_security
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_flash_sector
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_ft_sum
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_security_data
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_protection_status
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_data_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_factory_calib_data
</UL>

<P><STRONG><a name="[12]"></a>fputc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, main.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fputc &rArr; cb_putc &rArr; UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_putc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[7d]"></a>freq_offset_tune</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, freq_offset.o(.text.freq_offset_tune))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = freq_offset_tune
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_complete_packet
</UL>

<P><STRONG><a name="[7e]"></a>freq_offset_tx_begin</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, freq_offset.o(.text.freq_offset_tx_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = freq_offset_tx_begin
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_push_user_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_freq_offset_begin
</UL>

<P><STRONG><a name="[80]"></a>freq_offset_tx_begin_do</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, freq_offset.o(.text.freq_offset_tx_begin_do))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = freq_offset_tx_begin_do
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_raw_packet_set_tx_cte
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_raw_packet_set_param
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_raw_packet_send
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_get_us_time
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_raw_packet_set_tx_data
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_config
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_msg_handler
</UL>

<P><STRONG><a name="[b0]"></a>freq_offset_tx_end</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, freq_offset.o(.text.freq_offset_tx_end))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_freq_offset_end
</UL>

<P><STRONG><a name="[86]"></a>freq_test_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, freq_offset.o(.text.freq_test_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = freq_test_init
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_raw_packet_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[89]"></a>get_raw_pkt_count</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, raw_pkt.o(.text.get_raw_pkt_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = get_raw_pkt_count
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rx_cnt_result
</UL>

<P><STRONG><a name="[8b]"></a>get_raw_pkt_power</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, raw_pkt.o(.text.get_raw_pkt_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = get_raw_pkt_power
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rx_power_result
</UL>

<P><STRONG><a name="[c4]"></a>get_ring_buff_used</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, my_ring_buffer.o(.text.get_ring_buff_used))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_ring_buff_used
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_DUT_process
</UL>

<P><STRONG><a name="[88]"></a>get_rx_cnt_result</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rf_test.o(.text.get_rx_cnt_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_rx_cnt_result &rArr; get_raw_pkt_count
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_raw_pkt_count
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_complete_packet
</UL>

<P><STRONG><a name="[8a]"></a>get_rx_power_result</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rf_test.o(.text.get_rx_power_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_rx_power_result &rArr; get_raw_pkt_power
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_raw_pkt_power
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_complete_packet
</UL>

<P><STRONG><a name="[8c]"></a>gpio_pin_pulse</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, pulse_test_gpio.o(.text.gpio_pin_pulse))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gpio_pin_pulse &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_WriteValue
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_DUT_process
</UL>

<P><STRONG><a name="[23]"></a>noos_start</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, noos_impl.o(.text.noos_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = noos_start
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init_controller
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[2b]"></a>on_lle_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(.text.on_lle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = on_lle_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata.evt_cb_table)
</UL>
<P><STRONG><a name="[d]"></a>on_raw_packet_done</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, raw_pkt.o(.text.on_raw_packet_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = on_raw_packet_done
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_push_user_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_raw_tx_rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> raw_pkt.o(.text.raw_pkt_malloc_init)
</UL>
<P><STRONG><a name="[c]"></a>on_raw_packet_done_tx</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, freq_offset.o(.text.on_raw_packet_done_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = on_raw_packet_done_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_push_user_msg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freq_offset.o(.text.freq_test_init)
</UL>
<P><STRONG><a name="[6b]"></a>os_impl_get_driver</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, noos_impl.o(.text.os_impl_get_driver))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[ad]"></a>peek_ring_fifo_char</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, my_ring_buffer.o(.text.peek_ring_fifo_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = peek_ring_fifo_char
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_DUT_process
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ring_fifo_char
</UL>

<P><STRONG><a name="[26]"></a>pendsv_isr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, noos_impl.o(.text.pendsv_isr))
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[77]"></a>program_flash</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, eflash.o(.text.program_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = program_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_flash_sector
</UL>

<P><STRONG><a name="[a0]"></a>raw_packet_set_rx_param</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, raw_pkt.o(.text.raw_packet_set_rx_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = raw_packet_set_rx_param
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_raw_packet_set_param
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_msg_handler
</UL>

<P><STRONG><a name="[a1]"></a>raw_packet_set_tx_param</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, raw_pkt.o(.text.raw_packet_set_tx_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = raw_packet_set_tx_param
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_raw_packet_set_param
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_msg_handler
</UL>

<P><STRONG><a name="[a2]"></a>raw_pkt_malloc_init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, raw_pkt.o(.text.raw_pkt_malloc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = raw_pkt_malloc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_raw_packet_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[a4]"></a>raw_pkt_rx_test</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, raw_pkt.o(.text.raw_pkt_rx_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = raw_pkt_rx_test &rArr; show_rx &rArr; Smooth_Average &rArr; Pow_Smooth
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_raw_packet_recv
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_get_us_time
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_rx
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pkt_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_msg_handler
</UL>

<P><STRONG><a name="[a7]"></a>raw_pkt_tx_test</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, raw_pkt.o(.text.raw_pkt_tx_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = raw_pkt_tx_test &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_raw_packet_send
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_get_us_time
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_raw_packet_set_tx_data
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_push_user_msg
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pkt_reset
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_msg_handler
</UL>

<P><STRONG><a name="[74]"></a>read_flash_security</STRONG> (Thumb, 72 bytes, Stack size 96 bytes, eflash.o(.text.read_flash_security))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = read_flash_security &rArr; SYSCTRL_ICacheControl &rArr; SYSCTRL_CacheControl0 &rArr; set_reg_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ICacheControl
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash_security0
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_prepare_factory_data
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_security_data
</UL>

<P><STRONG><a name="[ac]"></a>read_ring_fifo_char</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, my_ring_buffer.o(.text.read_ring_fifo_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = read_ring_fifo_char &rArr; peek_ring_fifo_char
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peek_ring_fifo_char
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_DUT_process
</UL>

<P><STRONG><a name="[ae]"></a>restart_raw_pkt_rx</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, raw_pkt.o(.text.restart_raw_pkt_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = restart_raw_pkt_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_push_user_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_rx_cnt_begin
</UL>

<P><STRONG><a name="[af]"></a>restart_raw_pkt_tx</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, raw_pkt.o(.text.restart_raw_pkt_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = restart_raw_pkt_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_push_user_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_tx_cnt_begin
</UL>

<P><STRONG><a name="[9a]"></a>rf_test_freq_offset_begin</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, rf_test.o(.text.rf_test_freq_offset_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rf_test_freq_offset_begin &rArr; freq_offset_tx_begin
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_offset_tx_begin
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_complete_packet
</UL>

<P><STRONG><a name="[9b]"></a>rf_test_freq_offset_end</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, rf_test.o(.text.rf_test_freq_offset_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rf_test_freq_offset_end
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_offset_tx_end
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_complete_packet
</UL>

<P><STRONG><a name="[96]"></a>rf_test_rx_cnt_begin</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, rf_test.o(.text.rf_test_rx_cnt_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rf_test_rx_cnt_begin &rArr; start_raw_tx_rx &rArr; on_raw_packet_done
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart_raw_pkt_rx
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_raw_tx_rx
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_complete_packet
</UL>

<P><STRONG><a name="[97]"></a>rf_test_rx_cnt_end</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, rf_test.o(.text.rf_test_rx_cnt_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rf_test_rx_cnt_end &rArr; stop_raw_tx_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_raw_tx_rx
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_complete_packet
</UL>

<P><STRONG><a name="[98]"></a>rf_test_rx_sen_begin</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, rf_test.o(.text.rf_test_rx_sen_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rf_test_rx_sen_begin
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_complete_packet
</UL>

<P><STRONG><a name="[99]"></a>rf_test_rx_sen_end</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, rf_test.o(.text.rf_test_rx_sen_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rf_test_rx_sen_end
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_complete_packet
</UL>

<P><STRONG><a name="[92]"></a>rf_test_tx_cnt_begin</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, rf_test.o(.text.rf_test_tx_cnt_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rf_test_tx_cnt_begin &rArr; set_rf_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_set_timer
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart_raw_pkt_tx
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rf_acc_addr
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rf_channel
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_complete_packet
</UL>

<P><STRONG><a name="[93]"></a>rf_test_tx_cnt_end</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, rf_test.o(.text.rf_test_tx_cnt_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = rf_test_tx_cnt_end &rArr; DUT_cmd_rf_tx_cnt &rArr; uart_cmd_packet_assemble &rArr; check_crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_cmd_rf_tx_cnt
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_complete_packet
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_cnt_test_over
</UL>

<P><STRONG><a name="[94]"></a>rf_test_tx_power_begin</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, rf_test.o(.text.rf_test_tx_power_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rf_test_tx_power_begin
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_set_timer
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_complete_packet
</UL>

<P><STRONG><a name="[95]"></a>rf_test_tx_power_end</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, rf_test.o(.text.rf_test_tx_power_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = rf_test_tx_power_end &rArr; DUT_cmd_rf_tx_power &rArr; uart_cmd_packet_assemble &rArr; check_crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_cmd_rf_tx_power
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_power_test_over
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_complete_packet
</UL>

<P><STRONG><a name="[b5]"></a>ring_fifo_init</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, my_ring_buffer.o(.text.ring_fifo_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ring_fifo_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_power_of_two
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_DUT_init
</UL>

<P><STRONG><a name="[9c]"></a>set_dut_test_state</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rf_test.o(.text.set_dut_test_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = set_dut_test_state
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_complete_packet
</UL>

<P><STRONG><a name="[b3]"></a>set_rf_acc_addr</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, raw_pkt.o(.text.set_rf_acc_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_rf_acc_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_tx_cnt_begin
</UL>

<P><STRONG><a name="[b2]"></a>set_rf_channel</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, raw_pkt.o(.text.set_rf_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = set_rf_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_tx_cnt_begin
</UL>

<P><STRONG><a name="[68]"></a>setup_peripherals</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, main.o(.text.setup_peripherals))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = setup_peripherals &rArr; uart1_init &rArr; PINCTRL_SelUartRxdIn &rArr; PINCTRL_SelInput &rArr; PINCTRL_SetPadMux &rArr; source_id_on_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_DUT_init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_gpio_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_uart
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[28]"></a>setup_profile</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, profile.o(.text.setup_profile))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = setup_profile
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_register_packet_handler
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_add_event_handler
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata.evt_cb_table)
</UL>
<P><STRONG><a name="[e]"></a>start_raw_tx_rx</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, raw_pkt.o(.text.start_raw_tx_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = start_raw_tx_rx &rArr; on_raw_packet_done
</UL>
<BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_raw_packet_done
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_rx_cnt_begin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rf_test.o(.text.rf_test_tx_cnt_begin)
</UL>
<P><STRONG><a name="[b1]"></a>stop_raw_tx_rx</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, raw_pkt.o(.text.stop_raw_tx_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stop_raw_tx_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_rx_cnt_end
</UL>

<P><STRONG><a name="[25]"></a>svc_isr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, noos_impl.o(.text.svc_isr))
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[b7]"></a>test_gpio_init</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, pulse_test_gpio.o(.text.test_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = test_gpio_init &rArr; SYSCTRL_ClearClkGateMulti &rArr; SYSCTRL_ClearClkGate &rArr; SYSCTRL_ClkGateCtrl &rArr; set_reg_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_WriteValue
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_SetDirection
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SetPadMux
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGateMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
</UL>

<P><STRONG><a name="[24]"></a>tick_isr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, noos_impl.o(.text.tick_isr))
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[69]"></a>trace_rtt_init</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, trace.o(.text.trace_rtt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = trace_rtt_init &rArr; SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[c0]"></a>tx_cnt_test_over</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, rf_test.o(.text.tx_cnt_test_over))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = tx_cnt_test_over &rArr; rf_test_tx_cnt_end &rArr; DUT_cmd_rf_tx_cnt &rArr; uart_cmd_packet_assemble &rArr; check_crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_tx_cnt_end
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_msg_handler
</UL>

<P><STRONG><a name="[f]"></a>tx_power_test_over</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, rf_test.o(.text.tx_power_test_over))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = tx_power_test_over &rArr; rf_test_tx_power_end &rArr; DUT_cmd_rf_tx_power &rArr; uart_cmd_packet_assemble &rArr; check_crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_tx_power_end
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rf_test.o(.text.rf_test_tx_power_begin)
</UL>
<P><STRONG><a name="[b8]"></a>uart1_init</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, main.o(.text.uart1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = uart1_init &rArr; PINCTRL_SelUartRxdIn &rArr; PINCTRL_SelInput &rArr; PINCTRL_SetPadMux &rArr; source_id_on_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_Pull
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SelUartRxdIn
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SetPadMux
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGateMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
</UL>

<P><STRONG><a name="[b9]"></a>uart_DUT_init</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, uart_golden_dut.o(.text.uart_DUT_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = uart_DUT_init &rArr; apUART_Initialize &rArr; apUART_BaudRateSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_set_irq_callback
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_fifo_init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
</UL>

<P><STRONG><a name="[c3]"></a>uart_DUT_process</STRONG> (Thumb, 962 bytes, Stack size 32 bytes, uart_golden_dut.o(.text.uart_DUT_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = uart_DUT_process &rArr; process_complete_packet &rArr; rf_test_tx_cnt_end &rArr; DUT_cmd_rf_tx_cnt &rArr; uart_cmd_packet_assemble &rArr; check_crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_crc16
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_complete_packet
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_pulse
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ring_buff_used
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ring_fifo_char
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peek_ring_fifo_char
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_dut_isr
</UL>

<P><STRONG><a name="[42]"></a>uart_DUT_send</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, uart_golden_dut.o(.text.uart_DUT_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uart_DUT_send &rArr; UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Check_TXFIFO_FULL
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_cmd_rf_freq_offset
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_cmd_rf_rx_sen
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_cmd_rf_rx_cnt
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_cmd_rf_tx_power
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_cmd_rf_tx_cnt
</UL>

<P><STRONG><a name="[41]"></a>uart_cmd_packet_assemble</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, uart_golden_dut.o(.text.uart_cmd_packet_assemble))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = uart_cmd_packet_assemble &rArr; check_crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_crc16
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_cmd_rf_freq_offset
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_cmd_rf_rx_sen
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_cmd_rf_rx_cnt
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_cmd_rf_tx_power
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_cmd_rf_tx_cnt
</UL>

<P><STRONG><a name="[11]"></a>uart_dut_isr</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, uart_golden_dut.o(.text.uart_dut_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = uart_dut_isr &rArr; uart_DUT_process &rArr; process_complete_packet &rArr; rf_test_tx_cnt_end &rArr; DUT_cmd_rf_tx_cnt &rArr; uart_cmd_packet_assemble &rArr; check_crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_DUT_process
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Check_RXFIFO_EMPTY
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Get_all_raw_int_stat
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_ring_fifo_char
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_golden_dut.o(.text.uart_DUT_init)
</UL>
<P><STRONG><a name="[75]"></a>write_flash</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, eflash.o(.text.write_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = write_flash &rArr; write_flash0
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash0
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_ft_sum
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_security_data
</UL>

<P><STRONG><a name="[cd]"></a>write_flash0</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, eflash.o(.text.write_flash0))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = write_flash0
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
</UL>

<P><STRONG><a name="[c8]"></a>write_ring_fifo_char</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, my_ring_buffer.o(.text.write_ring_fifo_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = write_ring_fifo_char
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_dut_isr
</UL>

<P><STRONG><a name="[ce]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ec]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[ed]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[ee]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[8d]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_pulse
</UL>

<P><STRONG><a name="[d0]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ef]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[f0]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[f1]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[a8]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pkt_tx_test
</UL>

<P><STRONG><a name="[f2]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[f3]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[f4]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[20]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[1f]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_create
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_fifo_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[29]"></a>cb_hard_fault</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, main.o(.text.cb_hard_fault))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cb_hard_fault
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata.evt_cb_table)
</UL>
<P><STRONG><a name="[2a]"></a>cb_assertion</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, main.o(.text.cb_assertion))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cb_assertion
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata.evt_cb_table)
</UL>
<P><STRONG><a name="[2c]"></a>cb_heap_out_of_mem</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, main.o(.text.cb_heap_out_of_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cb_heap_out_of_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata.evt_cb_table)
</UL>
<P><STRONG><a name="[10]"></a>user_packet_handler</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, profile.o(.text.user_packet_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = user_packet_handler &rArr; user_msg_handler &rArr; raw_pkt_rx_test &rArr; show_rx &rArr; Smooth_Average &rArr; Pow_Smooth
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pkt_malloc_init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_test_init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_msg_handler
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event_packet_get_user_msg
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_event_state_get_state
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event_packet_get_type
</UL>
<BR>[Address Reference Count : 1]<UL><LI> profile.o(.text.setup_profile)
</UL>
<P><STRONG><a name="[ca]"></a>hci_event_packet_get_type</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, profile.o(.text.hci_event_packet_get_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = hci_event_packet_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[cb]"></a>btstack_event_state_get_state</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, profile.o(.text.btstack_event_state_get_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = btstack_event_state_get_state
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[cc]"></a>hci_event_packet_get_user_msg</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, profile.o(.text.hci_event_packet_get_user_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = hci_event_packet_get_user_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[c9]"></a>user_msg_handler</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, profile.o(.text.user_msg_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = user_msg_handler &rArr; raw_pkt_rx_test &rArr; show_rx &rArr; Smooth_Average &rArr; Pow_Smooth
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_offset_tx_begin_do
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_packet_set_tx_param
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_packet_set_rx_param
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_cnt_test_over
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pkt_rx_test
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pkt_tx_test
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[b6]"></a>is_power_of_two</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, my_ring_buffer.o(.text.is_power_of_two))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = is_power_of_two
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_fifo_init
</UL>

<P><STRONG><a name="[91]"></a>process_complete_packet</STRONG> (Thumb, 988 bytes, Stack size 32 bytes, uart_golden_dut.o(.text.process_complete_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = process_complete_packet &rArr; rf_test_tx_cnt_end &rArr; DUT_cmd_rf_tx_cnt &rArr; uart_cmd_packet_assemble &rArr; check_crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dut_test_state
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_freq_offset_end
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_offset_tune
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_freq_offset_begin
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rx_power_result
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_rx_sen_end
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_rx_sen_begin
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rx_cnt_result
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_rx_cnt_end
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_rx_cnt_begin
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_tx_power_end
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_tx_power_begin
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_tx_cnt_end
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_test_tx_cnt_begin
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_cmd_rf_freq_offset
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_cmd_rf_rx_sen
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_cmd_rf_rx_cnt
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_cmd_rf_tx_power
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_cmd_rf_tx_cnt
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_DUT_process
</UL>

<P><STRONG><a name="[0]"></a>timer_cb_0</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, noos_impl.o(.text.timer_cb_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_cb_0 &rArr; timer_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.data.sw_timers)
</UL>
<P><STRONG><a name="[be]"></a>timer_cb</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, noos_impl.o(.text.timer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb_7
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb_6
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb_5
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb_4
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb_3
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb_2
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb_1
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb_0
</UL>

<P><STRONG><a name="[1]"></a>timer_cb_1</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, noos_impl.o(.text.timer_cb_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_cb_1 &rArr; timer_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.data.sw_timers)
</UL>
<P><STRONG><a name="[2]"></a>timer_cb_2</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, noos_impl.o(.text.timer_cb_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_cb_2 &rArr; timer_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.data.sw_timers)
</UL>
<P><STRONG><a name="[3]"></a>timer_cb_3</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, noos_impl.o(.text.timer_cb_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_cb_3 &rArr; timer_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.data.sw_timers)
</UL>
<P><STRONG><a name="[4]"></a>timer_cb_4</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, noos_impl.o(.text.timer_cb_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_cb_4 &rArr; timer_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.data.sw_timers)
</UL>
<P><STRONG><a name="[5]"></a>timer_cb_5</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, noos_impl.o(.text.timer_cb_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_cb_5 &rArr; timer_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.data.sw_timers)
</UL>
<P><STRONG><a name="[6]"></a>timer_cb_6</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, noos_impl.o(.text.timer_cb_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_cb_6 &rArr; timer_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.data.sw_timers)
</UL>
<P><STRONG><a name="[7]"></a>timer_cb_7</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, noos_impl.o(.text.timer_cb_7))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_cb_7 &rArr; timer_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.data.sw_timers)
</UL>
<P><STRONG><a name="[14]"></a>timer_create</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, noos_impl.o(.text.timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_raise_assertion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[15]"></a>timer_start</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, noos_impl.o(.text.timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_set_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[16]"></a>timer_stop</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, noos_impl.o(.text.timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_set_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[17]"></a>timer_delete</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, noos_impl.o(.text.timer_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_delete
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_set_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[18]"></a>task_create</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, noos_impl.o(.text.task_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = task_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[19]"></a>queue_create</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, noos_impl.o(.text.queue_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = queue_create &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[1a]"></a>queue_send_msg</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, noos_impl.o(.text.queue_send_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = queue_send_msg &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[1b]"></a>queue_recv_msg</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, noos_impl.o(.text.queue_recv_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = queue_recv_msg &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_controller_run
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_process
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[9e]"></a>idle_process</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, noos_impl.o(.text.idle_process))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_recv_msg
</UL>

<P><STRONG><a name="[1d]"></a>dummy_event_wait</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, noos_impl.o(.text.dummy_event_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = dummy_event_wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[1e]"></a>dummy_event_set</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, noos_impl.o(.text.dummy_event_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = dummy_event_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[21]"></a>enter_critical</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, noos_impl.o(.text.enter_critical))
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[22]"></a>leave_critical</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, noos_impl.o(.text.leave_critical))
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[1c]"></a>dummy_event_create</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, noos_impl.o(.text.dummy_event_create))
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[a3]"></a>raw_pkt_reset</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, raw_pkt.o(.text.raw_pkt_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = raw_pkt_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pkt_rx_test
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pkt_tx_test
</UL>

<P><STRONG><a name="[a5]"></a>show_rx</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, raw_pkt.o(.text.show_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = show_rx &rArr; Smooth_Average &rArr; Pow_Smooth
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smooth_Average
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_raw_packet_get_rx_data
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pkt_rx_test
</UL>

<P><STRONG><a name="[62]"></a>Pow_Smooth</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, filter.o(.text.Pow_Smooth))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Pow_Smooth
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smooth_Average
</UL>

<P><STRONG><a name="[aa]"></a>read_flash_security0</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, eflash.o(.text.read_flash_security0))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = read_flash_security0 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_page_read
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash_security
</UL>

<P><STRONG><a name="[ab]"></a>security_page_read</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, eflash.o(.text.security_page_read))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash_security0
</UL>

<P><STRONG><a name="[79]"></a>is_data_ready</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, eflash.o(.text.is_data_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = is_data_ready &rArr; calc_ft_sum &rArr; calc_checksum_32
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_ft_sum
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ft_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_prepare_factory_data
</UL>

<P><STRONG><a name="[7a]"></a>flash_read_protection_status</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, eflash.o(.text.flash_read_protection_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = flash_read_protection_status
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_prepare_factory_data
</UL>

<P><STRONG><a name="[73]"></a>copy_security_data</STRONG> (Thumb, 122 bytes, Stack size 96 bytes, eflash.o(.text.copy_security_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = copy_security_data &rArr; read_flash_security &rArr; SYSCTRL_ICacheControl &rArr; SYSCTRL_CacheControl0 &rArr; set_reg_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash_security
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_prepare_factory_data
</UL>

<P><STRONG><a name="[7c]"></a>write_ft_sum</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, eflash.o(.text.write_ft_sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = write_ft_sum &rArr; write_flash &rArr; write_flash0
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_ft_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_prepare_factory_data
</UL>

<P><STRONG><a name="[8f]"></a>get_ft_sum</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, eflash.o(.text.get_ft_sum))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_data_ready
</UL>

<P><STRONG><a name="[6c]"></a>calc_ft_sum</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, eflash.o(.text.calc_ft_sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = calc_ft_sum &rArr; calc_checksum_32
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_checksum_32
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_ft_sum
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_data_ready
</UL>

<P><STRONG><a name="[6d]"></a>calc_checksum_32</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, eflash.o(.text.calc_checksum_32))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = calc_checksum_32
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_ft_sum
</UL>

<P><STRONG><a name="[48]"></a>GIO_MaskedWrite</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, peripheral_gpio.o(.text.GIO_MaskedWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GIO_MaskedWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_SetDirection
</UL>

<P><STRONG><a name="[49]"></a>PINCTRL_SelInput</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, peripheral_pinctrl.o(.text.PINCTRL_SelInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = PINCTRL_SelInput &rArr; PINCTRL_SetPadMux &rArr; source_id_on_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SetPadMux
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_id_for_input_source
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reg_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SelUartRxdIn
</UL>

<P><STRONG><a name="[4a]"></a>set_reg_bits</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, peripheral_pinctrl.o(.text.set_reg_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = set_reg_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SetPadMux
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SelInput
</UL>

<P><STRONG><a name="[4b]"></a>pin_id_for_input_source</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, peripheral_pinctrl.o(.text.pin_id_for_input_source))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pin_id_for_input_source
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SelInput
</UL>

<P><STRONG><a name="[4e]"></a>source_id_on_pin</STRONG> (Thumb, 160 bytes, Stack size 20 bytes, peripheral_pinctrl.o(.text.source_id_on_pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = source_id_on_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SetPadMux
</UL>

<P><STRONG><a name="[5b]"></a>SYSCTRL_ClkGateCtrl</STRONG> (Thumb, 902 bytes, Stack size 32 bytes, peripheral_sysctrl.o(.text.SYSCTRL_ClkGateCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SYSCTRL_ClkGateCtrl &rArr; set_reg_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reg_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGate
</UL>

<P><STRONG><a name="[58]"></a>set_reg_bit</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, peripheral_sysctrl.o(.text.set_reg_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = set_reg_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_CacheControl0
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClkGateCtrl
</UL>

<P><STRONG><a name="[59]"></a>set_reg_bits</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, peripheral_sysctrl.o(.text.set_reg_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = set_reg_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_SetLDOOutput
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_CacheControl0
</UL>

<P><STRONG><a name="[57]"></a>SYSCTRL_CacheControl0</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, peripheral_sysctrl.o(.text.SYSCTRL_CacheControl0))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SYSCTRL_CacheControl0 &rArr; set_reg_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reg_bits
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reg_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ICacheControl
</UL>

<P><STRONG><a name="[52]"></a>_DoInit</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, trace.o(.text._DoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[50]"></a>_GetAvailWriteSpace</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, trace.o(.text._GetAvailWriteSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_GetAvailWriteSpace
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[55]"></a>_WriteNoCheck</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, trace.o(.text._WriteNoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[56]"></a>_WriteBlocking</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, trace.o(.text._WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[d1]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[cf]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[d4]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[d3]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[13]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
